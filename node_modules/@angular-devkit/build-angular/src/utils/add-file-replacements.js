"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
class MissingFileReplacementException extends core_1.BaseException {
    constructor(path) {
        super(`The ${path} path in file replacements does not exist.`);
    }
}
exports.MissingFileReplacementException = MissingFileReplacementException;
// Note: This method changes the file replacements in place.
function addFileReplacements(root, host, fileReplacements) {
    if (fileReplacements.length === 0) {
        return rxjs_1.of(null);
    }
    // Normalize the legacy format into the current one.
    for (const fileReplacement of fileReplacements) {
        const currentFormat = fileReplacement;
        const maybeOldFormat = fileReplacement;
        if (maybeOldFormat.src && maybeOldFormat.replaceWith) {
            currentFormat.replace = maybeOldFormat.src;
            currentFormat.with = maybeOldFormat.replaceWith;
        }
    }
    const normalizedFileReplacements = fileReplacements;
    // Ensure all the replacements exist.
    const errorOnFalse = (path) => operators_1.tap((exists) => {
        if (!exists) {
            throw new MissingFileReplacementException(path);
        }
    });
    const existObservables = normalizedFileReplacements
        .map(replacement => [
        host.exists(core_1.join(root, replacement.replace)).pipe(errorOnFalse(replacement.replace)),
        host.exists(core_1.join(root, replacement.with)).pipe(errorOnFalse(replacement.with)),
    ])
        .reduce((prev, curr) => prev.concat(curr), []);
    return rxjs_1.forkJoin(existObservables).pipe(operators_1.tap(() => {
        normalizedFileReplacements.forEach(replacement => {
            host.aliases.set(core_1.join(root, core_1.normalize(replacement.replace)), core_1.join(root, core_1.normalize(replacement.with)));
        });
    }), operators_1.map(() => null));
}
exports.addFileReplacements = addFileReplacements;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkLWZpbGUtcmVwbGFjZW1lbnRzLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9hbmd1bGFyX2RldmtpdC9idWlsZF9hbmd1bGFyL3NyYy91dGlscy9hZGQtZmlsZS1yZXBsYWNlbWVudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7R0FNRzs7QUFFSCwrQ0FBdUY7QUFDdkYsK0JBQWdEO0FBQ2hELDhDQUEwQztBQVExQyxxQ0FBNkMsU0FBUSxvQkFBYTtJQUNoRSxZQUFZLElBQVk7UUFDdEIsS0FBSyxDQUFDLE9BQU8sSUFBSSw0Q0FBNEMsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7Q0FDRjtBQUpELDBFQUlDO0FBRUQsNERBQTREO0FBQzVELDZCQUNFLElBQVUsRUFDVixJQUF5QixFQUN6QixnQkFBbUM7SUFHbkMsRUFBRSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEMsTUFBTSxDQUFDLFNBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQixDQUFDO0lBRUQsb0RBQW9EO0lBQ3BELEdBQUcsQ0FBQyxDQUFDLE1BQU0sZUFBZSxJQUFJLGdCQUFnQixDQUFDLENBQUMsQ0FBQztRQUMvQyxNQUFNLGFBQWEsR0FBRyxlQUF5QyxDQUFDO1FBQ2hFLE1BQU0sY0FBYyxHQUFHLGVBQTJDLENBQUM7UUFFbkUsRUFBRSxDQUFDLENBQUMsY0FBYyxDQUFDLEdBQUcsSUFBSSxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUNyRCxhQUFhLENBQUMsT0FBTyxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUM7WUFDM0MsYUFBYSxDQUFDLElBQUksR0FBRyxjQUFjLENBQUMsV0FBVyxDQUFDO1FBQ2xELENBQUM7SUFDSCxDQUFDO0lBRUQsTUFBTSwwQkFBMEIsR0FBRyxnQkFBNEMsQ0FBQztJQUVoRixxQ0FBcUM7SUFDckMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxJQUFZLEVBQUUsRUFBRSxDQUFDLGVBQUcsQ0FBQyxDQUFDLE1BQWUsRUFBRSxFQUFFO1FBQzdELEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNaLE1BQU0sSUFBSSwrQkFBK0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsRCxDQUFDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLGdCQUFnQixHQUFHLDBCQUEwQjtTQUNoRCxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsTUFBTSxDQUFDLFdBQUksQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQy9FLENBQUM7U0FDRCxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRWpELE1BQU0sQ0FBQyxlQUFRLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLENBQ3BDLGVBQUcsQ0FBQyxHQUFHLEVBQUU7UUFDUCwwQkFBMEIsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDL0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQ2QsV0FBSSxDQUFDLElBQUksRUFBRSxnQkFBUyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUMxQyxXQUFJLENBQUMsSUFBSSxFQUFFLGdCQUFTLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQ3hDLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxFQUNGLGVBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FDaEIsQ0FBQztBQUNKLENBQUM7QUFoREQsa0RBZ0RDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQgeyBCYXNlRXhjZXB0aW9uLCBQYXRoLCBqb2luLCBub3JtYWxpemUsIHZpcnR1YWxGcyB9IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIGZvcmtKb2luLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge1xuICBDdXJyZW50RmlsZVJlcGxhY2VtZW50LFxuICBEZXByZWNhdGVkRmlsZVJlcGxhY21lbnQsXG4gIEZpbGVSZXBsYWNlbWVudCxcbn0gZnJvbSAnLi4vYnJvd3Nlci9zY2hlbWEnO1xuXG5cbmV4cG9ydCBjbGFzcyBNaXNzaW5nRmlsZVJlcGxhY2VtZW50RXhjZXB0aW9uIGV4dGVuZHMgQmFzZUV4Y2VwdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHBhdGg6IFN0cmluZykge1xuICAgIHN1cGVyKGBUaGUgJHtwYXRofSBwYXRoIGluIGZpbGUgcmVwbGFjZW1lbnRzIGRvZXMgbm90IGV4aXN0LmApO1xuICB9XG59XG5cbi8vIE5vdGU6IFRoaXMgbWV0aG9kIGNoYW5nZXMgdGhlIGZpbGUgcmVwbGFjZW1lbnRzIGluIHBsYWNlLlxuZXhwb3J0IGZ1bmN0aW9uIGFkZEZpbGVSZXBsYWNlbWVudHMoXG4gIHJvb3Q6IFBhdGgsXG4gIGhvc3Q6IHZpcnR1YWxGcy5BbGlhc0hvc3QsXG4gIGZpbGVSZXBsYWNlbWVudHM6IEZpbGVSZXBsYWNlbWVudFtdLFxuKTogT2JzZXJ2YWJsZTxudWxsPiB7XG5cbiAgaWYgKGZpbGVSZXBsYWNlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG9mKG51bGwpO1xuICB9XG5cbiAgLy8gTm9ybWFsaXplIHRoZSBsZWdhY3kgZm9ybWF0IGludG8gdGhlIGN1cnJlbnQgb25lLlxuICBmb3IgKGNvbnN0IGZpbGVSZXBsYWNlbWVudCBvZiBmaWxlUmVwbGFjZW1lbnRzKSB7XG4gICAgY29uc3QgY3VycmVudEZvcm1hdCA9IGZpbGVSZXBsYWNlbWVudCBhcyBDdXJyZW50RmlsZVJlcGxhY2VtZW50O1xuICAgIGNvbnN0IG1heWJlT2xkRm9ybWF0ID0gZmlsZVJlcGxhY2VtZW50IGFzIERlcHJlY2F0ZWRGaWxlUmVwbGFjbWVudDtcblxuICAgIGlmIChtYXliZU9sZEZvcm1hdC5zcmMgJiYgbWF5YmVPbGRGb3JtYXQucmVwbGFjZVdpdGgpIHtcbiAgICAgIGN1cnJlbnRGb3JtYXQucmVwbGFjZSA9IG1heWJlT2xkRm9ybWF0LnNyYztcbiAgICAgIGN1cnJlbnRGb3JtYXQud2l0aCA9IG1heWJlT2xkRm9ybWF0LnJlcGxhY2VXaXRoO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IG5vcm1hbGl6ZWRGaWxlUmVwbGFjZW1lbnRzID0gZmlsZVJlcGxhY2VtZW50cyBhcyBDdXJyZW50RmlsZVJlcGxhY2VtZW50W107XG5cbiAgLy8gRW5zdXJlIGFsbCB0aGUgcmVwbGFjZW1lbnRzIGV4aXN0LlxuICBjb25zdCBlcnJvck9uRmFsc2UgPSAocGF0aDogc3RyaW5nKSA9PiB0YXAoKGV4aXN0czogYm9vbGVhbikgPT4ge1xuICAgIGlmICghZXhpc3RzKSB7XG4gICAgICB0aHJvdyBuZXcgTWlzc2luZ0ZpbGVSZXBsYWNlbWVudEV4Y2VwdGlvbihwYXRoKTtcbiAgICB9XG4gIH0pO1xuXG4gIGNvbnN0IGV4aXN0T2JzZXJ2YWJsZXMgPSBub3JtYWxpemVkRmlsZVJlcGxhY2VtZW50c1xuICAgIC5tYXAocmVwbGFjZW1lbnQgPT4gW1xuICAgICAgaG9zdC5leGlzdHMoam9pbihyb290LCByZXBsYWNlbWVudC5yZXBsYWNlKSkucGlwZShlcnJvck9uRmFsc2UocmVwbGFjZW1lbnQucmVwbGFjZSkpLFxuICAgICAgaG9zdC5leGlzdHMoam9pbihyb290LCByZXBsYWNlbWVudC53aXRoKSkucGlwZShlcnJvck9uRmFsc2UocmVwbGFjZW1lbnQud2l0aCkpLFxuICAgIF0pXG4gICAgLnJlZHVjZSgocHJldiwgY3VycikgPT4gcHJldi5jb25jYXQoY3VyciksIFtdKTtcblxuICByZXR1cm4gZm9ya0pvaW4oZXhpc3RPYnNlcnZhYmxlcykucGlwZShcbiAgICB0YXAoKCkgPT4ge1xuICAgICAgbm9ybWFsaXplZEZpbGVSZXBsYWNlbWVudHMuZm9yRWFjaChyZXBsYWNlbWVudCA9PiB7XG4gICAgICAgIGhvc3QuYWxpYXNlcy5zZXQoXG4gICAgICAgICAgam9pbihyb290LCBub3JtYWxpemUocmVwbGFjZW1lbnQucmVwbGFjZSkpLFxuICAgICAgICAgIGpvaW4ocm9vdCwgbm9ybWFsaXplKHJlcGxhY2VtZW50LndpdGgpKSxcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH0pLFxuICAgIG1hcCgoKSA9PiBudWxsKSxcbiAgKTtcbn1cbiJdfQ==