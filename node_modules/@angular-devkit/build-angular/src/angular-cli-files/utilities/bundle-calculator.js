"use strict";
// tslint:disable
// TODO: cleanup this file, it's copied as is from Angular CLI.
Object.defineProperty(exports, "__esModule", { value: true });
function calculateSizes(budget, compilation) {
    const calculatorMap = {
        all: AllCalculator,
        allScript: AllScriptCalculator,
        any: AnyCalculator,
        anyScript: AnyScriptCalculator,
        bundle: BundleCalculator,
        initial: InitialCalculator,
    };
    const ctor = calculatorMap[budget.type];
    const calculator = new ctor(budget, compilation);
    return calculator.calculate();
}
exports.calculateSizes = calculateSizes;
class Calculator {
    constructor(budget, compilation) {
        this.budget = budget;
        this.compilation = compilation;
    }
}
exports.Calculator = Calculator;
/**
 * A named bundle.
 */
class BundleCalculator extends Calculator {
    calculate() {
        const size = this.compilation.chunks
            .filter(chunk => chunk.name === this.budget.name)
            .reduce((files, chunk) => [...files, ...chunk.files], [])
            .map((file) => this.compilation.assets[file].size())
            .reduce((total, size) => total + size, 0);
        return [{ size, label: this.budget.name }];
    }
}
/**
 * The sum of all initial chunks (marked as initial by webpack).
 */
class InitialCalculator extends Calculator {
    calculate() {
        const initialChunks = this.compilation.chunks.filter(chunk => chunk.isInitial);
        const size = initialChunks
            .reduce((files, chunk) => [...files, ...chunk.files], [])
            .map((file) => this.compilation.assets[file].size())
            .reduce((total, size) => total + size, 0);
        return [{ size, label: 'initial' }];
    }
}
/**
 * The sum of all the scripts portions.
 */
class AllScriptCalculator extends Calculator {
    calculate() {
        const size = Object.keys(this.compilation.assets)
            .filter(key => /\.js$/.test(key))
            .map(key => this.compilation.assets[key])
            .map(asset => asset.size())
            .reduce((total, size) => total + size, 0);
        return [{ size, label: 'total scripts' }];
    }
}
/**
 * All scripts and assets added together.
 */
class AllCalculator extends Calculator {
    calculate() {
        const size = Object.keys(this.compilation.assets)
            .map(key => this.compilation.assets[key].size())
            .reduce((total, size) => total + size, 0);
        return [{ size, label: 'total' }];
    }
}
/**
 * Any script, individually.
 */
class AnyScriptCalculator extends Calculator {
    calculate() {
        return Object.keys(this.compilation.assets)
            .filter(key => /\.js$/.test(key))
            .map(key => {
            const asset = this.compilation.assets[key];
            return {
                size: asset.size(),
                label: key
            };
        });
    }
}
/**
 * Any script or asset (images, css, etc).
 */
class AnyCalculator extends Calculator {
    calculate() {
        return Object.keys(this.compilation.assets)
            .map(key => {
            const asset = this.compilation.assets[key];
            return {
                size: asset.size(),
                label: key
            };
        });
    }
}
/**
 * Calculate the bytes given a string value.
 */
function calculateBytes(val, baseline, factor) {
    if (/^\d+$/.test(val)) {
        return parseFloat(val);
    }
    if (/^(\d+)%$/.test(val)) {
        return calculatePercentBytes(val, baseline, factor);
    }
    const multiplier = getMultiplier(val);
    const numberVal = parseFloat(val.replace(/((k|m|M|)b?)$/, ''));
    const baselineVal = baseline ? parseFloat(baseline.replace(/((k|m|M|)b?)$/, '')) : 0;
    const baselineMultiplier = baseline ? getMultiplier(baseline) : 1;
    const factorMultiplier = factor ? (factor === 'pos' ? 1 : -1) : 1;
    return numberVal * multiplier + baselineVal * baselineMultiplier * factorMultiplier;
}
exports.calculateBytes = calculateBytes;
function getMultiplier(val) {
    if (/^(\d+)b?$/.test(val)) {
        return 1;
    }
    else if (/^(\d+)kb$/.test(val)) {
        return 1000;
    }
    else if (/^(\d+)(m|M)b$/.test(val)) {
        return 1000 * 1000;
    }
    else {
        return 1;
    }
}
function calculatePercentBytes(val, baseline, factor) {
    const baselineBytes = calculateBytes(baseline);
    const percentage = parseFloat(val.replace(/%/g, ''));
    return baselineBytes + baselineBytes * percentage / 100 * (factor === 'pos' ? 1 : -1);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLWNhbGN1bGF0b3IuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL2FuZ3VsYXJfZGV2a2l0L2J1aWxkX2FuZ3VsYXIvc3JjL2FuZ3VsYXItY2xpLWZpbGVzL3V0aWxpdGllcy9idW5kbGUtY2FsY3VsYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsaUJBQWlCO0FBQ2pCLCtEQUErRDs7QUF1Qi9ELHdCQUErQixNQUFjLEVBQUUsV0FBd0I7SUFDckUsTUFBTSxhQUFhLEdBQUc7UUFDcEIsR0FBRyxFQUFFLGFBQWE7UUFDbEIsU0FBUyxFQUFFLG1CQUFtQjtRQUM5QixHQUFHLEVBQUUsYUFBYTtRQUNsQixTQUFTLEVBQUUsbUJBQW1CO1FBQzlCLE1BQU0sRUFBRSxnQkFBZ0I7UUFDeEIsT0FBTyxFQUFFLGlCQUFpQjtLQUMzQixDQUFDO0lBQ0YsTUFBTSxJQUFJLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QyxNQUFNLFVBQVUsR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDakQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUNoQyxDQUFDO0FBWkQsd0NBWUM7QUFFRDtJQUNFLFlBQXVCLE1BQWMsRUFBWSxXQUF3QjtRQUFsRCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQVksZ0JBQVcsR0FBWCxXQUFXLENBQWE7SUFBRyxDQUFDO0NBRzlFO0FBSkQsZ0NBSUM7QUFFRDs7R0FFRztBQUNILHNCQUF1QixTQUFRLFVBQVU7SUFDdkMsU0FBUztRQUNQLE1BQU0sSUFBSSxHQUFXLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTTthQUN6QyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO2FBQ2hELE1BQU0sQ0FBQyxDQUFDLEtB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QU0sQ0FBQyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ3JCLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNOLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0FBQ0gsQ0FBQztBQUVELCtCQUErQixHQUFXLEVBQUUsUUFBaUIsRUFBRSxNQUF3QjtJQUNyRixNQUFNLGFBQWEsR0FBRyxjQUFjLENBQUMsUUFBa0IsQ0FBQyxDQUFDO0lBQ3pELE1BQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3JELE1BQU0sQ0FBQyxhQUFhLEdBQUcsYUFBYSxHQUFHLFVBQVUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRzbGludDpkaXNhYmxlXG4vLyBUT0RPOiBjbGVhbnVwIHRoaXMgZmlsZSwgaXQncyBjb3BpZWQgYXMgaXMgZnJvbSBBbmd1bGFyIENMSS5cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgQnVkZ2V0IH0gZnJvbSAnLi4vLi4vYnJvd3Nlci9zY2hlbWEnO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbXBpbGF0aW9uIHtcbiAgYXNzZXRzOiBhbnk7XG4gIGNodW5rczogYW55W107XG4gIHdhcm5pbmdzOiBzdHJpbmdbXTtcbiAgZXJyb3JzOiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTaXplIHtcbiAgc2l6ZTogbnVtYmVyO1xuICBsYWJlbD86IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZVNpemVzKGJ1ZGdldDogQnVkZ2V0LCBjb21waWxhdGlvbjogQ29tcGlsYXRpb24pOiBTaXplW10ge1xuICBjb25zdCBjYWxjdWxhdG9yTWFwID0ge1xuICAgIGFsbDogQWxsQ2FsY3VsYXRvcixcbiAgICBhbGxTY3JpcHQ6IEFsbFNjcmlwdENhbGN1bGF0b3IsXG4gICAgYW55OiBBbnlDYWxjdWxhdG9yLFxuICAgIGFueVNjcmlwdDogQW55U2NyaXB0Q2FsY3VsYXRvcixcbiAgICBidW5kbGU6IEJ1bmRsZUNhbGN1bGF0b3IsXG4gICAgaW5pdGlhbDogSW5pdGlhbENhbGN1bGF0b3IsXG4gIH07XG4gIGNvbnN0IGN0b3IgPSBjYWxjdWxhdG9yTWFwW2J1ZGdldC50eXBlXTtcbiAgY29uc3QgY2FsY3VsYXRvciA9IG5ldyBjdG9yKGJ1ZGdldCwgY29tcGlsYXRpb24pO1xuICByZXR1cm4gY2FsY3VsYXRvci5jYWxjdWxhdGUoKTtcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENhbGN1bGF0b3Ige1xuICBjb25zdHJ1Y3RvciAocHJvdGVjdGVkIGJ1ZGdldDogQnVkZ2V0LCBwcm90ZWN0ZWQgY29tcGlsYXRpb246IENvbXBpbGF0aW9uKSB7fVxuXG4gIGFic3RyYWN0IGNhbGN1bGF0ZSgpOiBTaXplW107XG59XG5cbi8qKlxuICogQSBuYW1lZCBidW5kbGUuXG4gKi9cbmNsYXNzIEJ1bmRsZUNhbGN1bGF0b3IgZXh0ZW5kcyBDYWxjdWxhdG9yIHtcbiAgY2FsY3VsYXRlKCkge1xuICAgIGNvbnN0IHNpemU6IG51bWJlciA9IHRoaXMuY29tcGlsYXRpb24uY2h1bmtzXG4gICAgICAuZmlsdGVyKGNodW5rID0+IGNodW5rLm5hbWUgPT09IHRoaXMuYnVkZ2V0Lm5hbWUpXG4gICAgICAucmVkdWNlKChmaWxlcywgY2h1bmspID0+IFsuLi5maWxlcywgLi4uY2h1bmsuZmlsZXNdLCBbXSlcbiAgICAgIC5tYXAoKGZpbGU6IHN0cmluZykgPT4gdGhpcy5jb21waWxhdGlvbi5hc3NldHNbZmlsZV0uc2l6ZSgpKVxuICAgICAgLnJlZHVjZSgodG90YWw6IG51bWJlciwgc2l6ZTogbnVtYmVyKSA9PiB0b3RhbCArIHNpemUsIDApO1xuICAgIHJldHVybiBbe3NpemUsIGxhYmVsOiB0aGlzLmJ1ZGdldC5uYW1lfV07XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgc3VtIG9mIGFsbCBpbml0aWFsIGNodW5rcyAobWFya2VkIGFzIGluaXRpYWwgYnkgd2VicGFjaykuXG4gKi9cbmNsYXNzIEluaXRpYWxDYWxjdWxhdG9yIGV4dGVuZHMgQ2FsY3VsYXRvciB7XG4gIGNhbGN1bGF0ZSgpIHtcbiAgICBjb25zdCBpbml0aWFsQ2h1bmtzID0gdGhpcy5jb21waWxhdGlvbi5jaHVua3MuZmlsdGVyKGNodW5rID0+IGNodW5rLmlzSW5pdGlhbCk7XG4gICAgY29uc3Qgc2l6ZTogbnVtYmVyID0gaW5pdGlhbENodW5rc1xuICAgICAgLnJlZHVjZSgoZmlsZXMsIGNodW5rKSA9PiBbLi4uZmlsZXMsIC4uLmNodW5rLmZpbGVzXSwgW10pXG4gICAgICAubWFwKChmaWxlOiBzdHJpbmcpID0+IHRoaXMuY29tcGlsYXRpb24uYXNzZXRzW2ZpbGVdLnNpemUoKSlcbiAgICAgIC5yZWR1Y2UoKHRvdGFsOiBudW1iZXIsIHNpemU6IG51bWJlcikgPT4gdG90YWwgKyBzaXplLCAwKTtcbiAgICByZXR1cm4gW3tzaXplLCBsYWJlbDogJ2luaXRpYWwnfV07XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgc3VtIG9mIGFsbCB0aGUgc2NyaXB0cyBwb3J0aW9ucy5cbiAqL1xuY2xhc3MgQWxsU2NyaXB0Q2FsY3VsYXRvciBleHRlbmRzIENhbGN1bGF0b3Ige1xuICBjYWxjdWxhdGUoKSB7XG4gICAgY29uc3Qgc2l6ZTogbnVtYmVyID0gT2JqZWN0LmtleXModGhpcy5jb21waWxhdGlvbi5hc3NldHMpXG4gICAgICAuZmlsdGVyKGtleSA9PiAvXFwuanMkLy50ZXN0KGtleSkpXG4gICAgICAubWFwKGtleSA9PiB0aGlzLmNvbXBpbGF0aW9uLmFzc2V0c1trZXldKVxuICAgICAgLm1hcChhc3NldCA9PiBhc3NldC5zaXplKCkpXG4gICAgICAucmVkdWNlKCh0b3RhbDogbnVtYmVyLCBzaXplOiBudW1iZXIpID0+IHRvdGFsICsgc2l6ZSwgMCk7XG4gICAgcmV0dXJuIFt7c2l6ZSwgbGFiZWw6ICd0b3RhbCBzY3JpcHRzJ31dO1xuICB9XG59XG5cbi8qKlxuICogQWxsIHNjcmlwdHMgYW5kIGFzc2V0cyBhZGRlZCB0b2dldGhlci5cbiAqL1xuY2xhc3MgQWxsQ2FsY3VsYXRvciBleHRlbmRzIENhbGN1bGF0b3Ige1xuICBjYWxjdWxhdGUoKSB7XG4gICAgY29uc3Qgc2l6ZTogbnVtYmVyID0gT2JqZWN0LmtleXModGhpcy5jb21waWxhdGlvbi5hc3NldHMpXG4gICAgICAubWFwKGtleSA9PiB0aGlzLmNvbXBpbGF0aW9uLmFzc2V0c1trZXldLnNpemUoKSlcbiAgICAgIC5yZWR1Y2UoKHRvdGFsOiBudW1iZXIsIHNpemU6IG51bWJlcikgPT4gdG90YWwgKyBzaXplLCAwKTtcbiAgICByZXR1cm4gW3tzaXplLCBsYWJlbDogJ3RvdGFsJ31dO1xuICB9XG59XG5cbi8qKlxuICogQW55IHNjcmlwdCwgaW5kaXZpZHVhbGx5LlxuICovXG5jbGFzcyBBbnlTY3JpcHRDYWxjdWxhdG9yIGV4dGVuZHMgQ2FsY3VsYXRvciB7XG4gIGNhbGN1bGF0ZSgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5jb21waWxhdGlvbi5hc3NldHMpXG4gICAgICAuZmlsdGVyKGtleSA9PiAvXFwuanMkLy50ZXN0KGtleSkpXG4gICAgICAubWFwKGtleSA9PiB7XG4gICAgICAgIGNvbnN0IGFzc2V0ID0gdGhpcy5jb21waWxhdGlvbi5hc3NldHNba2V5XTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzaXplOiBhc3NldC5zaXplKCksXG4gICAgICAgICAgbGFiZWw6IGtleVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBbnkgc2NyaXB0IG9yIGFzc2V0IChpbWFnZXMsIGNzcywgZXRjKS5cbiAqL1xuY2xhc3MgQW55Q2FsY3VsYXRvciBleHRlbmRzIENhbGN1bGF0b3Ige1xuICBjYWxjdWxhdGUoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuY29tcGlsYXRpb24uYXNzZXRzKVxuICAgICAgLm1hcChrZXkgPT4ge1xuICAgICAgICBjb25zdCBhc3NldCA9IHRoaXMuY29tcGlsYXRpb24uYXNzZXRzW2tleV07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2l6ZTogYXNzZXQuc2l6ZSgpLFxuICAgICAgICAgIGxhYmVsOiBrZXlcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlIHRoZSBieXRlcyBnaXZlbiBhIHN0cmluZyB2YWx1ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZUJ5dGVzKHZhbDogc3RyaW5nLCBiYXNlbGluZT86IHN0cmluZywgZmFjdG9yPzogKCdwb3MnIHwgJ25lZycpKTogbnVtYmVyIHtcbiAgaWYgKC9eXFxkKyQvLnRlc3QodmFsKSkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbCk7XG4gIH1cblxuICBpZiAoL14oXFxkKyklJC8udGVzdCh2YWwpKSB7XG4gICAgcmV0dXJuIGNhbGN1bGF0ZVBlcmNlbnRCeXRlcyh2YWwsIGJhc2VsaW5lLCBmYWN0b3IpO1xuICB9XG5cbiAgY29uc3QgbXVsdGlwbGllciA9IGdldE11bHRpcGxpZXIodmFsKTtcblxuICBjb25zdCBudW1iZXJWYWwgPSBwYXJzZUZsb2F0KHZhbC5yZXBsYWNlKC8oKGt8bXxNfCliPykkLywgJycpKTtcbiAgY29uc3QgYmFzZWxpbmVWYWwgPSBiYXNlbGluZSA/IHBhcnNlRmxvYXQoYmFzZWxpbmUucmVwbGFjZSgvKChrfG18TXwpYj8pJC8sICcnKSkgOiAwO1xuICBjb25zdCBiYXNlbGluZU11bHRpcGxpZXIgPSBiYXNlbGluZSA/IGdldE11bHRpcGxpZXIoYmFzZWxpbmUpIDogMTtcbiAgY29uc3QgZmFjdG9yTXVsdGlwbGllciA9IGZhY3RvciA/IChmYWN0b3IgPT09ICdwb3MnID8gMSA6IC0xKSA6IDE7XG5cbiAgcmV0dXJuIG51bWJlclZhbCAqIG11bHRpcGxpZXIgKyBiYXNlbGluZVZhbCAqIGJhc2VsaW5lTXVsdGlwbGllciAqIGZhY3Rvck11bHRpcGxpZXI7XG59XG5cbmZ1bmN0aW9uIGdldE11bHRpcGxpZXIodmFsOiBzdHJpbmcpOiBudW1iZXIge1xuICBpZiAoL14oXFxkKyliPyQvLnRlc3QodmFsKSkge1xuICAgIHJldHVybiAxO1xuICB9IGVsc2UgaWYgKC9eKFxcZCspa2IkLy50ZXN0KHZhbCkpIHtcbiAgICByZXR1cm4gMTAwMDtcbiAgfSBlbHNlIGlmICgvXihcXGQrKShtfE0pYiQvLnRlc3QodmFsKSkge1xuICAgIHJldHVybiAxMDAwICogMTAwMDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gMTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVQZXJjZW50Qnl0ZXModmFsOiBzdHJpbmcsIGJhc2VsaW5lPzogc3RyaW5nLCBmYWN0b3I/OiAoJ3BvcycgfCAnbmVnJykpOiBudW1iZXIge1xuICBjb25zdCBiYXNlbGluZUJ5dGVzID0gY2FsY3VsYXRlQnl0ZXMoYmFzZWxpbmUgYXMgc3RyaW5nKTtcbiAgY29uc3QgcGVyY2VudGFnZSA9IHBhcnNlRmxvYXQodmFsLnJlcGxhY2UoLyUvZywgJycpKTtcbiAgcmV0dXJuIGJhc2VsaW5lQnl0ZXMgKyBiYXNlbGluZUJ5dGVzICogcGVyY2VudGFnZSAvIDEwMCAqIChmYWN0b3IgPT09ICdwb3MnID8gMSA6IC0xKTtcbn1cbiJdfQ==