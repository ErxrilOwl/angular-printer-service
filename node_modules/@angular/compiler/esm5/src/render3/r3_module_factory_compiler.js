/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { identifierName } from '../compile_metadata';
import * as o from '../output/output_ast';
import { Identifiers as R3 } from './r3_identifiers';
/**
 * Write a Renderer2 compatibility module factory to the output context.
 */
export function compileModuleFactory(outputCtx, module, backPatchReferenceOf, resolver) {
    var ngModuleFactoryVar = identifierName(module.type) + "NgFactory";
    var parentInjector = 'parentInjector';
    var createFunction = o.fn([new o.FnParam(parentInjector, o.DYNAMIC_TYPE)], [new o.IfStmt(o.THIS_EXPR.prop(R3.PATCH_DEPS).notIdentical(o.literal(true, o.INFERRED_TYPE)), [
            o.THIS_EXPR.prop(R3.PATCH_DEPS).set(o.literal(true, o.INFERRED_TYPE)).toStmt(),
            backPatchReferenceOf(module.type).callFn([]).toStmt()
        ])], o.INFERRED_TYPE, null, ngModuleFactoryVar + "_Create");
    var moduleFactoryLiteral = o.literalMap([
        { key: 'moduleType', value: outputCtx.importExpr(module.type.reference), quoted: false },
        { key: 'create', value: createFunction, quoted: false }
    ]);
    outputCtx.statements.push(o.variable(ngModuleFactoryVar).set(moduleFactoryLiteral).toDeclStmt(o.DYNAMIC_TYPE, [
        o.StmtModifier.Exported, o.StmtModifier.Final
    ]));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicjNfbW9kdWxlX2ZhY3RvcnlfY29tcGlsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb21waWxlci9zcmMvcmVuZGVyMy9yM19tb2R1bGVfZmFjdG9yeV9jb21waWxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFHSCxPQUFPLEVBQXdILGNBQWMsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBRTFLLE9BQU8sS0FBSyxDQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFHMUMsT0FBTyxFQUFDLFdBQVcsSUFBSSxFQUFFLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUVuRDs7R0FFRztBQUNILE1BQU0sK0JBQ0YsU0FBd0IsRUFBRSxNQUErQixFQUN6RCxvQkFBbUUsRUFDbkUsUUFBaUM7SUFDbkMsSUFBTSxrQkFBa0IsR0FBTSxjQUFjLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFXLENBQUM7SUFFckUsSUFBTSxjQUFjLEdBQUcsZ0JBQWdCLENBQUM7SUFDeEMsSUFBTSxjQUFjLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FDdkIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUMvQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FDVCxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUM5RTtZQUNFLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFO1lBQzlFLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFO1NBQ3RELENBQUMsQ0FBQyxFQUNQLENBQUMsQ0FBQyxhQUFhLEVBQUUsSUFBSSxFQUFLLGtCQUFrQixZQUFTLENBQUMsQ0FBQztJQUUzRCxJQUFNLG9CQUFvQixHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUM7UUFDeEMsRUFBQyxHQUFHLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQztRQUN0RixFQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFDO0tBQ3RELENBQUMsQ0FBQztJQUVILFNBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUNyQixDQUFDLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxZQUFZLEVBQUU7UUFDbEYsQ0FBQyxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxLQUFLO0tBQzlDLENBQUMsQ0FBQyxDQUFDO0FBQ1YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtTdGF0aWNSZWZsZWN0b3J9IGZyb20gJy4uL2FvdC9zdGF0aWNfcmVmbGVjdG9yJztcbmltcG9ydCB7Q29tcGlsZURpcmVjdGl2ZU1ldGFkYXRhLCBDb21waWxlSWRlbnRpZmllck1ldGFkYXRhLCBDb21waWxlTmdNb2R1bGVNZXRhZGF0YSwgQ29tcGlsZVBpcGVTdW1tYXJ5LCBDb21waWxlVHlwZU1ldGFkYXRhLCBpZGVudGlmaWVyTmFtZX0gZnJvbSAnLi4vY29tcGlsZV9tZXRhZGF0YSc7XG5pbXBvcnQge0NvbXBpbGVNZXRhZGF0YVJlc29sdmVyfSBmcm9tICcuLi9tZXRhZGF0YV9yZXNvbHZlcic7XG5pbXBvcnQgKiBhcyBvIGZyb20gJy4uL291dHB1dC9vdXRwdXRfYXN0JztcbmltcG9ydCB7T3V0cHV0Q29udGV4dH0gZnJvbSAnLi4vdXRpbCc7XG5cbmltcG9ydCB7SWRlbnRpZmllcnMgYXMgUjN9IGZyb20gJy4vcjNfaWRlbnRpZmllcnMnO1xuXG4vKipcbiAqIFdyaXRlIGEgUmVuZGVyZXIyIGNvbXBhdGliaWxpdHkgbW9kdWxlIGZhY3RvcnkgdG8gdGhlIG91dHB1dCBjb250ZXh0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tcGlsZU1vZHVsZUZhY3RvcnkoXG4gICAgb3V0cHV0Q3R4OiBPdXRwdXRDb250ZXh0LCBtb2R1bGU6IENvbXBpbGVOZ01vZHVsZU1ldGFkYXRhLFxuICAgIGJhY2tQYXRjaFJlZmVyZW5jZU9mOiAobW9kdWxlOiBDb21waWxlVHlwZU1ldGFkYXRhKSA9PiBvLkV4cHJlc3Npb24sXG4gICAgcmVzb2x2ZXI6IENvbXBpbGVNZXRhZGF0YVJlc29sdmVyKSB7XG4gIGNvbnN0IG5nTW9kdWxlRmFjdG9yeVZhciA9IGAke2lkZW50aWZpZXJOYW1lKG1vZHVsZS50eXBlKX1OZ0ZhY3RvcnlgO1xuXG4gIGNvbnN0IHBhcmVudEluamVjdG9yID0gJ3BhcmVudEluamVjdG9yJztcbiAgY29uc3QgY3JlYXRlRnVuY3Rpb24gPSBvLmZuKFxuICAgICAgW25ldyBvLkZuUGFyYW0ocGFyZW50SW5qZWN0b3IsIG8uRFlOQU1JQ19UWVBFKV0sXG4gICAgICBbbmV3IG8uSWZTdG10KFxuICAgICAgICAgIG8uVEhJU19FWFBSLnByb3AoUjMuUEFUQ0hfREVQUykubm90SWRlbnRpY2FsKG8ubGl0ZXJhbCh0cnVlLCBvLklORkVSUkVEX1RZUEUpKSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBvLlRISVNfRVhQUi5wcm9wKFIzLlBBVENIX0RFUFMpLnNldChvLmxpdGVyYWwodHJ1ZSwgby5JTkZFUlJFRF9UWVBFKSkudG9TdG10KCksXG4gICAgICAgICAgICBiYWNrUGF0Y2hSZWZlcmVuY2VPZihtb2R1bGUudHlwZSkuY2FsbEZuKFtdKS50b1N0bXQoKVxuICAgICAgICAgIF0pXSxcbiAgICAgIG8uSU5GRVJSRURfVFlQRSwgbnVsbCwgYCR7bmdNb2R1bGVGYWN0b3J5VmFyfV9DcmVhdGVgKTtcblxuICBjb25zdCBtb2R1bGVGYWN0b3J5TGl0ZXJhbCA9IG8ubGl0ZXJhbE1hcChbXG4gICAge2tleTogJ21vZHVsZVR5cGUnLCB2YWx1ZTogb3V0cHV0Q3R4LmltcG9ydEV4cHIobW9kdWxlLnR5cGUucmVmZXJlbmNlKSwgcXVvdGVkOiBmYWxzZX0sXG4gICAge2tleTogJ2NyZWF0ZScsIHZhbHVlOiBjcmVhdGVGdW5jdGlvbiwgcXVvdGVkOiBmYWxzZX1cbiAgXSk7XG5cbiAgb3V0cHV0Q3R4LnN0YXRlbWVudHMucHVzaChcbiAgICAgIG8udmFyaWFibGUobmdNb2R1bGVGYWN0b3J5VmFyKS5zZXQobW9kdWxlRmFjdG9yeUxpdGVyYWwpLnRvRGVjbFN0bXQoby5EWU5BTUlDX1RZUEUsIFtcbiAgICAgICAgby5TdG10TW9kaWZpZXIuRXhwb3J0ZWQsIG8uU3RtdE1vZGlmaWVyLkZpbmFsXG4gICAgICBdKSk7XG59XG4iXX0=