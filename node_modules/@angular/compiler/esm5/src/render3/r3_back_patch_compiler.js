/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as tslib_1 from "tslib";
import { DEFAULT_INTERPOLATION_CONFIG, DomElementSchemaRegistry, Lexer, Parser } from '../compiler';
import * as o from '../output/output_ast';
import { BindingParser } from '../template_parser/binding_parser';
import { compilePipe } from './r3_pipe_compiler';
import { BUILD_OPTIMIZER_REMOVE } from './r3_types';
import { compileComponent, compileDirective } from './r3_view_compiler';
/**
 * Produce the back-patching function for the given module to the output context.
 */
export function compileModuleBackPatch(outputCtx, name, module, kind, backPatchReferenceOf, parseTemplate, reflector, resolver) {
    var imports = [];
    var statements = [];
    try {
        // Call dependent back patching
        for (var _a = tslib_1.__values(module.importedModules), _b = _a.next(); !_b.done; _b = _a.next()) {
            var importedModule = _b.value;
            var importBackPatchFunction = backPatchReferenceOf(importedModule.type);
            // e.g. // @BUILD_OPTIMIZER_REMOVE
            imports.push(new o.CommentStmt(BUILD_OPTIMIZER_REMOVE));
            // e.g. ngBackPatch_some_other_module_Module();
            imports.push(importBackPatchFunction.callFn([]).toStmt());
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
        }
        finally { if (e_1) throw e_1.error; }
    }
    // The local output context allows collecting the back-patch statements that
    // are generated by the various compilers which allows putting placing them
    // into the body of a function instead of at global scope.
    var localCtx = {
        statements: statements,
        constantPool: outputCtx.constantPool,
        genFilePath: outputCtx.genFilePath,
        importExpr: outputCtx.importExpr
    };
    // e.g. export function ngBackPatch_some_module_Lib1Module()
    if (kind === 0 /* Renderer2 */) {
        // For all Renderer2 modules generate back-patching code for all the components, directives,
        // pipes, and injectables as well as the injector def for the module itself.
        var expressionParser = new Parser(new Lexer());
        var elementSchemaRegistry = new DomElementSchemaRegistry();
        var errors = [];
        var hostBindingParser = new BindingParser(expressionParser, DEFAULT_INTERPOLATION_CONFIG, elementSchemaRegistry, [], errors);
        try {
            // Back-patch all declared directive and components
            for (var _d = tslib_1.__values(module.declaredDirectives), _e = _d.next(); !_e.done; _e = _d.next()) {
                var declaredDirective = _e.value;
                var declaredDirectiveMetadata = resolver.getDirectiveMetadata(declaredDirective.reference);
                if (declaredDirectiveMetadata.isComponent) {
                    var _f = parseTemplate(declaredDirectiveMetadata, module, module.transitiveModule.directives), parsedTemplate = _f.template, parsedPipes = _f.pipes;
                    compileComponent(localCtx, declaredDirectiveMetadata, parsedPipes, parsedTemplate, reflector, hostBindingParser, 1 /* BackPatch */);
                }
                else {
                    compileDirective(localCtx, declaredDirectiveMetadata, reflector, hostBindingParser, 1 /* BackPatch */);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_g = _d.return)) _g.call(_d);
            }
            finally { if (e_2) throw e_2.error; }
        }
        try {
            // Back-patch all pipes declared in the module.
            for (var _h = tslib_1.__values(module.declaredPipes), _j = _h.next(); !_j.done; _j = _h.next()) {
                var pipeType = _j.value;
                var pipeMetadata = resolver.getPipeMetadata(pipeType.reference);
                if (pipeMetadata) {
                    compilePipe(localCtx, pipeMetadata, reflector, 1 /* BackPatch */);
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_j && !_j.done && (_k = _h.return)) _k.call(_h);
            }
            finally { if (e_3) throw e_3.error; }
        }
        if (errors.length) {
            throw new Error(errors.map(function (e) { return e.toString(); }).join('\n'));
        }
    }
    outputCtx.statements.push(new o.DeclareFunctionStmt(name, [], tslib_1.__spread(imports, statements), o.INFERRED_TYPE, [o.StmtModifier.Exported]));
    var e_1, _c, e_2, _g, e_3, _k;
}
//# sourceMappingURL=data:application/json;base64,