{"version":3,"sources":["packages/core/core-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","core","testing","this","_global","window","runInTestZone","fn","context","finishCallback","failCallback","currentZone","Zone","current","AsyncTestZoneSpec","undefined","Error","ProxyZoneSpec","proxyZoneSpec","get","assertPresent","proxyZone","getZoneWith","previousDelegate","getDelegate","parent","run","testZoneSpec","setDelegate","error","runGuarded","ComponentFixture","componentRef","ngZone","_autoDetect","_this","_isStable","_isDestroyed","_resolve","_promise","_onUnstableSubscription","_onStableSubscription","_onMicrotaskEmptySubscription","_onErrorSubscription","changeDetectorRef","elementRef","location","debugElement","getDebugNode","nativeElement","componentInstance","instance","runOutsideAngular","onUnstable","subscribe","next","onMicrotaskEmpty","detectChanges","onStable","scheduleMicroTask","hasPendingMacrotasks","onError","prototype","_tick","checkNoChanges","autoDetectChanges","autoDetect","isStable","whenStable","Promise","resolve","res","_getRenderer","_renderer","injector","RendererFactory2","whenRenderingDone","renderer","destroy","unsubscribe","_Zone","FakeAsyncTestZoneSpec","_fakeAsyncTestZoneSpec","resetFakeAsyncZoneFallback","resetDelegate","_inFakeAsyncCall","_getFakeAsyncZoneSpec","flushMicrotasksFallback","flushMicrotasks","_Zone$1","fakeAsyncTestModule","__symbol__","resetFakeAsyncZone","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__values","o","m","Symbol","iterator","i","call","length","value","done","__read","n","r","e","ar","push","__spread","arguments","concat","AsyncTestCompleter","rej","_reject","fail","stackTrace","defineProperty","enumerable","configurable","unimplemented","TestingCompiler","_super","apply","__extends","__","constructor","create","overrideModule","overrides","overrideDirective","directive","overrideComponent","component","overridePipe","loadAotSummaries","summaries","getComponentFactory","getComponentFromError","decorators","type","Injectable","Compiler","TestingCompilerFactory","UNDEFINED","TestComponentRenderer","insertRootElement","rootElementId","_nextRootElementId","ComponentFixtureAutoDetect","InjectionToken","ComponentFixtureNoNgZone","TestBed","_instantiated","_compiler","_moduleRef","_moduleFactory","_compilerOptions","_moduleOverrides","_componentOverrides","_directiveOverrides","_pipeOverrides","_providers","_declarations","_imports","_schemas","_activeFixtures","_testEnvAotSummaries","_aotSummaries","_templateOverrides","_isRoot","_rootProviderOverrides","platform","ngModule","initTestEnvironment","aotSummaries","testBed","getTestBed","resetTestEnvironment","resetTestingModule","configureCompiler","config","configureTestingModule","moduleDef","compileComponents","override","pipe","overrideTemplate","template","set","templateUrl","overrideTemplateUsingTestingModule","overrideProvider","token","provider","deprecatedOverrideProvider","notFoundValue","Injector","THROW_IF_NOT_FOUND","createComponent","ɵclearOverrides","forEach","fixture","console","stacktrace","_assertNotInstantiated","_a","_b","_c","_d","providers","declarations","imports","schemas","moduleType","_createCompilerAndModule","compileModuleAndAllComponentsAsync","then","moduleAndComponentFactories","ngModuleFactory","_initIfNeeded","compileModuleAndAllComponentsSync","errorCompType","ɵstringify","compFactory","templateOf","ɵoverrideComponentView","e_1_1","e_1","return","NgZone","enableLongStackTrace","ngZoneInjector","provide","useValue","name","ApplicationInitStatus","runInitializers","map","entry","rootScopeImports","rootProviderOverrides","RootScopeModule","NgModule","args","ɵAPP_ROOT","e_2","DynamicTestModule","compilerFactory","createTestingCompiler","e_2_1","methodName","methodDescription","result","execute","tokens","params","t","overrideProviderImpl","deprecated","ngInjectableDef","providedIn","useFactory","deps","flags","dep","depToken","depFlags","isArray","Optional","SkipSelf","ɵoverrideProvider","deprecatedBehavior","OverrideComponent","Component","selector","componentFactory","noNgZone","testComponentRenderer","rootElId","initComponent","NULL","_testBed","inject","indexOf","completer","promise","InjectSetupWrapper","_moduleDef","_addModule","self","_global$1","beforeEach","savedDocument","savedRequestAnimationFrame","savedNode","requestAnimationFrameCount","ɵ0","domino","process","ensureDocument","window_1","createWindow","document","Event","Node","impl","requestAnimationFrame","cb","setImmediate","cleanupDocument","afterEach","async","reject","asyncTest","asyncFallback","jasmine","err","fakeAsync","fakeAsyncFallback","_i","lastProxyZoneSpec","pendingPeriodicTimers","pendingTimers","tick","millis","tickFallback","flush","maxTurns","flushFallback","discardPeriodicTasks","discardPeriodicTasksFallback","withModule","__core_private_testing_placeholder__","ɵTestingCompiler","ɵTestingCompilerFactory","withBody","html","blockFn","body","innerHTML","blockReturn"],"mappings":";;;;;CAMC,SAAUA,EAAQC,GACI,iBAAZC,SAA0C,oBAAXC,OAAyBF,EAAQC,QAASE,QAAQ,kBACtE,mBAAXC,QAAyBA,OAAOC,IAAMD,OAAO,yBAA0B,UAAW,iBAAkBJ,GAC1GA,GAASD,EAAOO,GAAKP,EAAOO,OAAUP,EAAOO,GAAGC,KAAOR,EAAOO,GAAGC,SAAYR,EAAOO,GAAGC,KAAKC,YAAcT,EAAOO,GAAGC,MAHzH,CAIEE,KAAM,SAAWR,EAAQM,GAAQ;;;;;;;OAS/B,IAAIG,EAA6B,oBAAXC,OAAyBZ,OAASY,OAmDxD,SAASC,EAAcC,EAAIC,EAASC,EAAgBC,GAChD,IAAIC,EAAcC,KAAKC,QACnBC,EAAoBF,KAAwB,kBAChD,QAA0BG,IAAtBD,EACA,MAAM,IAAIE,MAAM,8JAGpB,IAAIC,EAAgBL,KAAoB,cACxC,QAAsBG,IAAlBE,EACA,MAAM,IAAID,MAAM,qJAGpB,IAAIE,EAAgBD,EAAcE,MAClCF,EAAcG,gBAGd,IAAIC,EAAYT,KAAKC,QAAQS,YAAY,iBACrCC,EAAmBL,EAAcM,cAuBrC,OAtBAH,EAAUI,OAAOC,IAAI,WACjB,IAAIC,EAAe,IAAIb,EAAkB,WAErCH,EAAYe,IAAI,WACRR,EAAcM,eAAiBG,GAE/BT,EAAcU,YAAYL,GAE9Bd,OAEL,SAAUoB,GAETlB,EAAYe,IAAI,WACRR,EAAcM,eAAiBG,GAE/BT,EAAcU,YAAYL,GAE9Bb,EAAamB,MAElB,QACHX,EAAcU,YAAYD,KAEvBf,KAAKC,QAAQiB,WAAWvB,EAAIC;;;;;;;;;;;;;;;AAyDvC,IAAIuB,EAAkC,WAClC,SAASA,EAAiBC,EAAcC,EAAQC,GAC5C,IAAIC,EAAQhC,KACZA,KAAK6B,aAAeA,EACpB7B,KAAK8B,OAASA,EACd9B,KAAK+B,YAAcA,EACnB/B,KAAKiC,WAAY,EACjBjC,KAAKkC,cAAe,EACpBlC,KAAKmC,SAAW,KAChBnC,KAAKoC,SAAW,KAChBpC,KAAKqC,wBAA0B,KAC/BrC,KAAKsC,sBAAwB,KAC7BtC,KAAKuC,8BAAgC,KACrCvC,KAAKwC,qBAAuB,KAC5BxC,KAAKyC,kBAAoBZ,EAAaY,kBACtCzC,KAAK0C,WAAab,EAAac,SAC/B3C,KAAK4C,aAAe9C,EAAK+C,aAAa7C,KAAK0C,WAAWI,eACtD9C,KAAK+C,kBAAoBlB,EAAamB,SACtChD,KAAK8C,cAAgB9C,KAAK0C,WAAWI,cACrC9C,KAAK6B,aAAeA,EACpB7B,KAAK8B,OAASA,EACVA,GAGAA,EAAOmB,kBAAkB,WACrBjB,EAAMK,wBACFP,EAAOoB,WAAWC,WAAYC,KAAM,WAAcpB,EAAMC,WAAY,KACxED,EAAMO,8BAAgCT,EAAOuB,iBAAiBF,WAC1DC,KAAM,WACEpB,EAAMD,aAGNC,EAAMsB,eAAc,MAIhCtB,EAAMM,sBAAwBR,EAAOyB,SAASJ,WAC1CC,KAAM,WACFpB,EAAMC,WAAY,EAEK,OAAnBD,EAAMI,UA+HlC,SAASoB,EAAkBpD,GACvBK,KAAKC,QAAQ8C,kBAAkB,oBAAqBpD;;;;;;;OA5H5BoD,CAAkB,WACT1B,EAAO2B,sBACe,OAAnBzB,EAAMI,WACNJ,EAAMG,UAAS,GACfH,EAAMG,SAAW,KACjBH,EAAMI,SAAW,WAOzCJ,EAAMQ,qBACFV,EAAO4B,QAAQP,WAAYC,KAAM,SAAU1B,GAAS,MAAMA,OA4G1E,OAxGAE,EAAiB+B,UAAUC,MAAQ,SAAUC,GACzC7D,KAAKyC,kBAAkBa,gBACnBO,GACA7D,KAAK6D,kBAMbjC,EAAiB+B,UAAUL,cAAgB,SAAUO,GACjD,IAAI7B,EAAQhC,UACW,IAAnB6D,IAA6BA,GAAiB,GAC/B,MAAf7D,KAAK8B,OAGL9B,KAAK8B,OAAOP,IAAI,WAAcS,EAAM4B,MAAMC,KAI1C7D,KAAK4D,MAAMC,IAMnBjC,EAAiB+B,UAAUE,eAAiB,WAAc7D,KAAKyC,kBAAkBoB,kBAMjFjC,EAAiB+B,UAAUG,kBAAoB,SAAUC,GAErD,QADmB,IAAfA,IAAyBA,GAAa,GACvB,MAAf/D,KAAK8B,OACL,MAAM,IAAIjB,MAAM,sEAEpBb,KAAK+B,YAAcgC,EACnB/D,KAAKsD,iBAMT1B,EAAiB+B,UAAUK,SAAW,WAAc,OAAOhE,KAAKiC,YAAcjC,KAAK8B,OAAO2B,sBAO1F7B,EAAiB+B,UAAUM,WAAa,WACpC,IAAIjC,EAAQhC,KACZ,OAAIA,KAAKgE,WACEE,QAAQC,SAAQ,GAEA,OAAlBnE,KAAKoC,SACHpC,KAAKoC,UAGZpC,KAAKoC,SAAW,IAAI8B,QAAQ,SAAUE,GAAOpC,EAAMG,SAAWiC,IACvDpE,KAAKoC,WAGpBR,EAAiB+B,UAAUU,aAAe,WAItC,YAHuBzD,IAAnBZ,KAAKsE,YACLtE,KAAKsE,UAAYtE,KAAK6B,aAAa0C,SAASvD,IAAIlB,EAAK0E,iBAAkB,OAEpExE,KAAKsE,WAKhB1C,EAAiB+B,UAAUc,kBAAoB,WAC3C,IAAIC,EAAW1E,KAAKqE,eACpB,OAAIK,GAAYA,EAASD,kBACdC,EAASD,oBAEbzE,KAAKiE,cAKhBrC,EAAiB+B,UAAUgB,QAAU,WAC5B3E,KAAKkC,eACNlC,KAAK6B,aAAa8C,UACkB,MAAhC3E,KAAKqC,0BACLrC,KAAKqC,wBAAwBuC,cAC7B5E,KAAKqC,wBAA0B,MAED,MAA9BrC,KAAKsC,wBACLtC,KAAKsC,sBAAsBsC,cAC3B5E,KAAKsC,sBAAwB,MAES,MAAtCtC,KAAKuC,gCACLvC,KAAKuC,8BAA8BqC,cACnC5E,KAAKuC,8BAAgC,MAER,MAA7BvC,KAAKwC,uBACLxC,KAAKwC,qBAAqBoC,cAC1B5E,KAAKwC,qBAAuB,MAEhCxC,KAAKkC,cAAe,IAGrBN,EArK0B,GAsLjCiD,EAAwB,oBAATpE,KAAuBA,KAAO,KAC7CqE,EAAwBD,GAASA,EAA6B,sBAC9D/D,EAAgB+D,GAASA,EAAqB,cAC9CE,EAAyB,KAO7B,SAASC,IACLD,EAAyB,KAEzBjE,GAAiBA,EAAcG,gBAAgBgE,gBAEnD,IAAIC,GAAmB,EAgEvB,SAASC,IACL,GAA8B,MAA1BJ,EACA,MAAM,IAAIlE,MAAM,0EAEpB,OAAOkE,EA+CX,SAASK,IACLD,IAAwBE;;;;;;;OAU5B,IAAIC,EAA0B,oBAAT7E,KAAuBA,KAAO,KAC/C8E,EAAsBD,GAAWA,EAAQA,EAAQE,WAAW,kBAOhE,SAASC,IACL,OAAIF,EACOA,EAAoBE,qBAGpBT,IAiHf,IAAIU,EAAgBC,OAAOC,iBACpBC,wBAA2BC,OAAS,SAAUC,EAAGC,GAAKD,EAAEF,UAAYG,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC,KAQzE,SAASE,EAASC,GACd,IAAIC,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UAAWC,EAAI,EAChE,OAAIH,EAAUA,EAAEI,KAAKL,IAEjBhD,KAAM,WAEF,OADIgD,GAAKI,GAAKJ,EAAEM,SAAQN,OAAI,IACnBO,MAAOP,GAAKA,EAAEI,KAAMI,MAAOR,KAKhD,SAASS,EAAOT,EAAGU,GACf,IAAIT,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UACjD,IAAKF,EAAG,OAAOD,EACf,IAAmBW,EAAYC,EAA3BR,EAAIH,EAAEI,KAAKL,GAAOa,KACtB,IACI,WAAc,IAANH,GAAgBA,KAAM,MAAQC,EAAIP,EAAEpD,QAAQwD,MAAMK,EAAGC,KAAKH,EAAEJ,OAExE,MAAOjF,GAASsF,GAAMtF,MAAOA,GAC7B,QACI,IACQqF,IAAMA,EAAEH,OAASP,EAAIG,EAAU,SAAIH,EAAEI,KAAKD,GAElD,QAAU,GAAIQ,EAAG,MAAMA,EAAEtF,OAE7B,OAAOuF,EAGX,SAASE,IACL,IAAK,IAAIF,KAAST,EAAI,EAAGA,EAAIY,UAAUV,OAAQF,IAC3CS,EAAKA,EAAGI,OAAOR,EAAOO,UAAUZ,KACpC,OAAOS;;;;;;;OAaX,IAAIK,EAAoC,WACpC,SAASA,IACL,IAAItF,EAAQhC,KACZA,KAAKoC,SAAW,IAAI8B,QAAQ,SAAUE,EAAKmD,GACvCvF,EAAMG,SAAWiC,EACjBpC,EAAMwF,QAAUD,IAUxB,OAPAD,EAAmB3D,UAAUiD,KAAO,SAAUD,GAAS3G,KAAKmC,SAASwE,IACrEW,EAAmB3D,UAAU8D,KAAO,SAAU/F,EAAOgG,GAAc1H,KAAKwH,QAAQ9F,IAChFiE,OAAOgC,eAAeL,EAAmB3D,UAAW,WAChD3C,IAAK,WAAc,OAAOhB,KAAKoC,UAC/BwF,YAAY,EACZC,cAAc,IAEXP,EAf4B;;;;;;;OAyBvC,SAASQ,IACL,MAAMjH,MAAM,iBAOhB,IAAIkH,EAAiC,SAAUC,GAE3C,SAASD,IACL,OAAkB,OAAXC,GAAmBA,EAAOC,MAAMjI,KAAMoH,YAAcpH,KAsC/D,OA5HJ,SAASkI,EAAUnC,EAAGC,GAElB,SAASmC,IAAOnI,KAAKoI,YAAcrC,EADnCL,EAAcK,EAAGC,GAEjBD,EAAEpC,UAAkB,OAANqC,EAAaL,OAAO0C,OAAOrC,IAAMmC,EAAGxE,UAAYqC,EAAErC,UAAW,IAAIwE,GAiF/ED,CAAUH,EAAiBC,GAI3BrC,OAAOgC,eAAeI,EAAgBpE,UAAW,YAC7C3C,IAAK,WAAc,MAAM8G,KACzBF,YAAY,EACZC,cAAc,IAElBE,EAAgBpE,UAAU2E,eAAiB,SAAU7I,EAAQ8I,GACzD,MAAMT,KAEVC,EAAgBpE,UAAU6E,kBAAoB,SAAUC,EAAWF,GAC/D,MAAMT,KAEVC,EAAgBpE,UAAU+E,kBAAoB,SAAUC,EAAWJ,GAC/D,MAAMT,KAEVC,EAAgBpE,UAAUiF,aAAe,SAAUH,EAAWF,GAC1D,MAAMT,KAMVC,EAAgBpE,UAAUkF,iBAAmB,SAAUC,GAAa,MAAMhB,KAM1EC,EAAgBpE,UAAUoF,oBAAsB,SAAUJ,GAAa,MAAMb,KAK7EC,EAAgBpE,UAAUqF,sBAAwB,SAAUtH,GAAS,MAAMoG,KAC3EC,EAAgBkB,aACVC,KAAMpJ,EAAKqJ,aAEVpB,EAzCyB,CA0ClCjI,EAAKsJ,UAMHC,EACA,SAASA,MAYTC,EAAY,IAAI3D,OAMhB4D,EAAuC,WACvC,SAASA,KAGT,OADAA,EAAsB5F,UAAU6F,kBAAoB,SAAUC,KACvDF,EAJ+B,GAMtCG,EAAqB,EAIrBC,EAA6B,IAAI7J,EAAK8J,eAAe,8BAIrDC,EAA2B,IAAI/J,EAAK8J,eAAe,4BAUnDE,EAAyB,WACzB,SAASA,IACL9J,KAAK+J,eAAgB,EACrB/J,KAAKgK,UAAY,KACjBhK,KAAKiK,WAAa,KAClBjK,KAAKkK,eAAiB,KACtBlK,KAAKmK,oBACLnK,KAAKoK,oBACLpK,KAAKqK,uBACLrK,KAAKsK,uBACLtK,KAAKuK,kBACLvK,KAAKwK,cACLxK,KAAKyK,iBACLzK,KAAK0K,YACL1K,KAAK2K,YACL3K,KAAK4K,mBACL5K,KAAK6K,qBAAuB,WAAc,UAC1C7K,KAAK8K,iBACL9K,KAAK+K,sBACL/K,KAAKgL,SAAU,EACfhL,KAAKiL,0BACLjL,KAAKkL,SAAW,KAChBlL,KAAKmL,SAAW,KAoapB,OArZArB,EAAQsB,oBAAsB,SAAUD,EAAUD,EAAUG,GACxD,IAAIC,EAAUC,IAEd,OADAD,EAAQF,oBAAoBD,EAAUD,EAAUG,GACzCC,GAOXxB,EAAQ0B,qBAAuB,WAAcD,IAAaC,wBAC1D1B,EAAQ2B,mBAAqB,WAEzB,OADAF,IAAaE,qBACN3B,GAMXA,EAAQ4B,kBAAoB,SAAUC,GAElC,OADAJ,IAAaG,kBAAkBC,GACxB7B,GAMXA,EAAQ8B,uBAAyB,SAAUC,GAEvC,OADAN,IAAaK,uBAAuBC,GAC7B/B,GAOXA,EAAQgC,kBAAoB,WAAc,OAAOP,IAAaO,qBAC9DhC,EAAQxB,eAAiB,SAAU6C,EAAUY,GAEzC,OADAR,IAAajD,eAAe6C,EAAUY,GAC/BjC,GAEXA,EAAQpB,kBAAoB,SAAUC,EAAWoD,GAE7C,OADAR,IAAa7C,kBAAkBC,EAAWoD,GACnCjC,GAEXA,EAAQtB,kBAAoB,SAAUC,EAAWsD,GAE7C,OADAR,IAAa/C,kBAAkBC,EAAWsD,GACnCjC,GAEXA,EAAQlB,aAAe,SAAUoD,EAAMD,GAEnC,OADAR,IAAa3C,aAAaoD,EAAMD,GACzBjC,GAEXA,EAAQmC,iBAAmB,SAAUtD,EAAWuD,GAE5C,OADAX,IAAa7C,kBAAkBC,GAAawD,KAAOD,SAAUA,EAAUE,YAAa,QAC7EtC,GAQXA,EAAQuC,mCAAqC,SAAU1D,EAAWuD,GAE9D,OADAX,IAAac,mCAAmC1D,EAAWuD,GACpDpC,GAEXA,EAAQwC,iBAAmB,SAAUC,EAAOC,GAExC,OADAjB,IAAae,iBAAiBC,EAAOC,GAC9B1C,GAEXA,EAAQ2C,2BAA6B,SAAUF,EAAOC,GAElD,OADAjB,IAAakB,2BAA2BF,EAAOC,GACxC1C,GAEXA,EAAQ9I,IAAM,SAAUuL,EAAOG,GAE3B,YADsB,IAAlBA,IAA4BA,EAAgB5M,EAAK6M,SAASC,oBACvDrB,IAAavK,IAAIuL,EAAOG,IAEnC5C,EAAQ+C,gBAAkB,SAAUlE,GAChC,OAAO4C,IAAasB,gBAAgBlE,IAexCmB,EAAQnG,UAAUyH,oBAAsB,SAAUD,EAAUD,EAAUG,GAClE,GAAIrL,KAAKkL,UAAYlL,KAAKmL,SACtB,MAAM,IAAItK,MAAM,gEAEpBb,KAAKkL,SAAWA,EAChBlL,KAAKmL,SAAWA,EACZE,IACArL,KAAK6K,qBAAuBQ,IAQpCvB,EAAQnG,UAAU6H,qBAAuB,WACrCxL,KAAKyL,qBACLzL,KAAKkL,SAAW,KAChBlL,KAAKmL,SAAW,KAChBnL,KAAK6K,qBAAuB,WAAc,WAE9Cf,EAAQnG,UAAU8H,mBAAqB,WACnC3L,EAAKgN,kBACL9M,KAAK8K,iBACL9K,KAAK+K,sBACL/K,KAAKgK,UAAY,KACjBhK,KAAKoK,oBACLpK,KAAKqK,uBACLrK,KAAKsK,uBACLtK,KAAKuK,kBACLvK,KAAKgL,SAAU,EACfhL,KAAKiL,0BACLjL,KAAKiK,WAAa,KAClBjK,KAAKkK,eAAiB,KACtBlK,KAAKmK,oBACLnK,KAAKwK,cACLxK,KAAKyK,iBACLzK,KAAK0K,YACL1K,KAAK2K,YACL3K,KAAK+J,eAAgB,EACrB/J,KAAK4K,gBAAgBmC,QAAQ,SAAUC,GACnC,IACIA,EAAQrI,UAEZ,MAAOqC,GACHiG,QAAQvL,MAAM,qCACViH,UAAWqE,EAAQjK,kBACnBmK,WAAYlG,OAIxBhH,KAAK4K,oBAETd,EAAQnG,UAAU+H,kBAAoB,SAAUC,GAC5C3L,KAAKmN,uBAAuB,4BAA6B,0BACzDnN,KAAKmK,iBAAiBjD,KAAKyE,IAE/B7B,EAAQnG,UAAUiI,uBAAyB,SAAUC,GAiBjD,IAAIuB,EAAIC,EAAIC,EAAIC,EAhBhBvN,KAAKmN,uBAAuB,iCAAkC,6BAC1DtB,EAAU2B,YACTJ,EAAKpN,KAAKwK,YAAYtD,KAAKe,MAAMmF,EAAIjG,EAAS0E,EAAU2B,YAEzD3B,EAAU4B,eACTJ,EAAKrN,KAAKyK,eAAevD,KAAKe,MAAMoF,EAAIlG,EAAS0E,EAAU4B,eAE5D5B,EAAU6B,UACTJ,EAAKtN,KAAK0K,UAAUxD,KAAKe,MAAMqF,EAAInG,EAAS0E,EAAU6B,UAEvD7B,EAAU8B,UACTJ,EAAKvN,KAAK2K,UAAUzD,KAAKe,MAAMsF,EAAIpG,EAAS0E,EAAU8B,UAEvD9B,EAAUR,cACVrL,KAAK8K,cAAc5D,KAAK2E,EAAUR,eAI1CvB,EAAQnG,UAAUmI,kBAAoB,WAClC,IAAI9J,EAAQhC,KACZ,GAAIA,KAAKkK,gBAAkBlK,KAAK+J,cAC5B,OAAO7F,QAAQC,QAAQ,MAE3B,IAAIyJ,EAAa5N,KAAK6N,2BACtB,OAAO7N,KAAKgK,UAAU8D,mCAAmCF,GACpDG,KAAK,SAAUC,GAChBhM,EAAMkI,eAAiB8D,EAA4BC,mBAG3DnE,EAAQnG,UAAUuK,cAAgB,WAC9B,IAAIlO,KAAK+J,cAAT,CAGA,IAAK/J,KAAKkK,eACN,IACI,IAAI0D,EAAa5N,KAAK6N,2BACtB7N,KAAKkK,eACDlK,KAAKgK,UAAUmE,kCAAkCP,GAAYK,gBAErE,MAAOjH,GACH,IAAIoH,EAAgBpO,KAAKgK,UAAUhB,sBAAsBhC,GACzD,MAAIoH,EACM,IAAIvN,MAAM,uCAAyCf,EAAKuO,WAAWD,GAAiB,2IAIpFpH,EAIlB,IACI,IAAK,IAAIoG,EAAKjH,EAASnG,KAAK+K,oBAAqBsC,EAAKD,EAAGhK,QAASiK,EAAGzG,KAAMyG,EAAKD,EAAGhK,OAAQ,CACvF,IAAIkK,EAAKD,EAAG1G,MAAOgC,EAAY2E,EAAG3E,UAC9B2F,EAActO,KAAKgK,UAAUjB,oBADyBuE,EAAGiB,YAE7DzO,EAAK0O,uBAAuB7F,EAAW2F,IAG/C,MAAOG,GAASC,GAAQhN,MAAO+M,GAC/B,QACI,IACQpB,IAAOA,EAAGzG,OAAS2G,EAAKH,EAAGuB,SAASpB,EAAG9G,KAAK2G,GAEpD,QAAU,GAAIsB,EAAK,MAAMA,EAAIhN,OAEjC,IAYIgN,EAAKnB,EAZLzL,EAAS,IAAIhC,EAAK8O,QAASC,sBAAsB,IAEjDC,EAAiBhP,EAAK6M,SAAStE,QAC/BmF,YAFeuB,QAASjP,EAAK8O,OAAQI,SAAUlN,IAG/CR,OAAQtB,KAAKkL,SAAS3G,SACtB0K,KAAMjP,KAAKkK,eAAe0D,WAAWqB,OAEzCjP,KAAKiK,WAAajK,KAAKkK,eAAe7B,OAAOyG,GAG7C9O,KAAKiK,WAAW1F,SAASvD,IAAIlB,EAAKoP,uBAAuBC,kBACzDnP,KAAK+J,eAAgB,IAGzBD,EAAQnG,UAAUkK,yBAA2B,WACzC,IAAI7L,EAAQhC,KACRwN,EAAYxN,KAAKwK,WAAWnD,SAAU0H,QAASjF,EAASkF,SAAUhP,QAClEyN,EAAetG,EAASnH,KAAKyK,cAAezK,KAAK+K,mBAAmBqE,IAAI,SAAUC,GAAS,OAAOA,EAAMd,cACxGe,KACAC,EAAwBvP,KAAKiL,uBACjC,GAAIjL,KAAKgL,QAAS,CACd,IAAIwE,EAAiC,WACjC,SAASA,KAOT,OALAA,EAAgBvG,aACVC,KAAMpJ,EAAK2P,SAAUC,OACXlC,UAAWrG,EAASoI,OAG7BC,EARyB,GAUpCF,EAAiBpI,KAAKsI,GAE1BhC,EAAUtG,MAAO6H,QAASjP,EAAK6P,UAAWX,SAAUhP,KAAKgL,UACzD,IA8BI4E,EAAKtC,EA9BLI,GAAW4B,EAAkBtP,KAAKmL,SAAUnL,KAAK0K,UACjDiD,EAAU3N,KAAK2K,SACfkF,EAAmC,WACnC,SAASA,KAKT,OAHAA,EAAkB5G,aACZC,KAAMpJ,EAAK2P,SAAUC,OAASlC,UAAWA,EAAWC,aAAcA,EAAcC,QAASA,EAASC,QAASA,MAE1GkC,EAN2B,GAQlCC,EAAkB9P,KAAKkL,SAAS3G,SAASvD,IAAIqI,GACjDrJ,KAAKgK,UAAY8F,EAAgBC,sBAAsB/P,KAAKmK,kBAC5D,IACI,IAAK,IAAIiD,EAAKjH,EAASgB,GAAUnH,KAAK6K,sBAAuB7K,KAAK8K,gBAAiBuC,EAAKD,EAAGhK,QAASiK,EAAGzG,KAAMyG,EAAKD,EAAGhK,OAEjHpD,KAAKgK,UAAUnB,iBADDwE,EAAG1G,OAIzB,MAAOqJ,GAASJ,GAAQlO,MAAOsO,GAC/B,QACI,IACQ3C,IAAOA,EAAGzG,OAAS0G,EAAKF,EAAGuB,SAASrB,EAAG7G,KAAK2G,GAEpD,QAAU,GAAIwC,EAAK,MAAMA,EAAIlO,OAMjC,OAJA1B,KAAKoK,iBAAiB2C,QAAQ,SAAUsC,GAAS,OAAOrN,EAAMgI,UAAU1B,eAAe+G,EAAM,GAAIA,EAAM,MACvGrP,KAAKqK,oBAAoB0C,QAAQ,SAAUsC,GAAS,OAAOrN,EAAMgI,UAAUtB,kBAAkB2G,EAAM,GAAIA,EAAM,MAC7GrP,KAAKsK,oBAAoByC,QAAQ,SAAUsC,GAAS,OAAOrN,EAAMgI,UAAUxB,kBAAkB6G,EAAM,GAAIA,EAAM,MAC7GrP,KAAKuK,eAAewC,QAAQ,SAAUsC,GAAS,OAAOrN,EAAMgI,UAAUpB,aAAayG,EAAM,GAAIA,EAAM,MAC5FQ,GAGX/F,EAAQnG,UAAUwJ,uBAAyB,SAAU8C,EAAYC,GAC7D,GAAIlQ,KAAK+J,cACL,MAAM,IAAIlJ,MAAM,UAAYqP,EAAoB,qGACOD,EAAa,OAG5EnG,EAAQnG,UAAU3C,IAAM,SAAUuL,EAAOG,GAGrC,QAFsB,IAAlBA,IAA4BA,EAAgB5M,EAAK6M,SAASC,oBAC9D5M,KAAKkO,gBACD3B,IAAUzC,EACV,OAAO9J,KAIX,IAAImQ,EAASnQ,KAAKiK,WAAW1F,SAASvD,IAAIuL,EAAOjD,GACjD,OAAO6G,IAAW7G,EAAYtJ,KAAKgK,UAAUzF,SAASvD,IAAIuL,EAAOG,GAAiByD,GAEtFrG,EAAQnG,UAAUyM,QAAU,SAAUC,EAAQjQ,EAAIC,GAC9C,IAAI2B,EAAQhC,KACZA,KAAKkO,gBACL,IAAIoC,EAASD,EAAOjB,IAAI,SAAUmB,GAAK,OAAOvO,EAAMhB,IAAIuP,KACxD,OAAOnQ,EAAG6H,MAAM5H,EAASiQ,IAE7BxG,EAAQnG,UAAU2E,eAAiB,SAAU6C,EAAUY,GACnD/L,KAAKmN,uBAAuB,iBAAkB,4BAC9CnN,KAAKoK,iBAAiBlD,MAAMiE,EAAUY,KAE1CjC,EAAQnG,UAAU+E,kBAAoB,SAAUC,EAAWoD,GACvD/L,KAAKmN,uBAAuB,oBAAqB,+BACjDnN,KAAKqK,oBAAoBnD,MAAMyB,EAAWoD,KAE9CjC,EAAQnG,UAAU6E,kBAAoB,SAAUC,EAAWsD,GACvD/L,KAAKmN,uBAAuB,oBAAqB,+BACjDnN,KAAKsK,oBAAoBpD,MAAMuB,EAAWsD,KAE9CjC,EAAQnG,UAAUiF,aAAe,SAAUoD,EAAMD,GAC7C/L,KAAKmN,uBAAuB,eAAgB,0BAC5CnN,KAAKuK,eAAerD,MAAM8E,EAAMD,KAEpCjC,EAAQnG,UAAU2I,iBAAmB,SAAUC,EAAOC,GAClDxM,KAAKwQ,qBAAqBjE,EAAOC,IAErC1C,EAAQnG,UAAU8I,2BAA6B,SAAUF,EAAOC,GAC5DxM,KAAKwQ,qBAAqBjE,EAAOC,GAA2B,IAEhE1C,EAAQnG,UAAU6M,qBAAuB,SAAUjE,EAAOC,EAAUiE,QAC7C,IAAfA,IAAyBA,GAAa,GACrB,iBAAVlE,GAAsBA,EAAMmE,iBACE,SAArCnE,EAAMmE,gBAAgBC,YAElB3Q,KAAKiL,uBAAuB/D,KAD5BsF,EAASoE,YAC0B7B,QAASxC,EAAOqE,WAAYpE,EAASoE,WAAYC,KAAMrE,EAASqE,WAGhE9B,QAASxC,EAAOyC,SAAUxC,EAASwC,WAG9E,IACIrI,EADAmK,EAAQ,EAERtE,EAASoE,YACTE,GAAS,KACTnK,EAAQ6F,EAASoE,aAGjBE,GAAS,IACTnK,EAAQ6F,EAASwC,UAErB,IAAI6B,GAAQrE,EAASqE,UAAYzB,IAAI,SAAU2B,GAC3C,IACIC,EADAC,EAAW,EAkBf,OAhBInL,MAAMoL,QAAQH,GACdA,EAAIhE,QAAQ,SAAUsC,GACdA,aAAiBvP,EAAKqR,SACtBF,GAAY,EAEP5B,aAAiBvP,EAAKsR,SAC3BH,GAAY,EAGZD,EAAW3B,IAKnB2B,EAAWD,GAEPE,EAAUD,KAEtBlR,EAAKuR,mBAAoB9E,MAAOA,EAAOuE,MAAOA,EAAOD,KAAMA,EAAMlK,MAAOA,EAAO2K,mBAAoBb,KAEvG3G,EAAQnG,UAAU0I,mCAAqC,SAAU1D,EAAWuD,GACxElM,KAAKmN,uBAAuB,qCAAsC,qBAClE,IAAIoE,EAAmC,WACnC,SAASA,KAKT,OAHAA,EAAkBtI,aACZC,KAAMpJ,EAAK0R,UAAW9B,OAAS+B,SAAU,QAASvF,SAAUA,MAE3DqF,EAN2B,GAQtCvR,KAAK+K,mBAAmB7D,MAAOyB,UAAWA,EAAW4F,WAAYgD,KAErEzH,EAAQnG,UAAUkJ,gBAAkB,SAAUlE,GAC1C,IAAI3G,EAAQhC,KACZA,KAAKkO,gBACL,IAAIwD,EAAmB1R,KAAKgK,UAAUjB,oBAAoBJ,GAC1D,IAAK+I,EACD,MAAM,IAAI7Q,MAAM,+BAAiCf,EAAKuO,WAAW1F,GAAa,oDAElF,IAAIgJ,EAAW3R,KAAKgB,IAAI6I,GAA0B,GAC9C9F,EAAa/D,KAAKgB,IAAI2I,GAA4B,GAClD7H,EAAS6P,EAAW,KAAO3R,KAAKgB,IAAIlB,EAAK8O,OAAQ,MACjDgD,EAAwB5R,KAAKgB,IAAIuI,GACjCsI,EAAW,OAASnI,IACxBkI,EAAsBpI,kBAAkBqI,GACxC,IAAIC,EAAgB,WAChB,IAAIjQ,EAAe6P,EAAiBrJ,OAAOvI,EAAK6M,SAASoF,QAAU,IAAMF,EAAU7P,EAAMiI,YACzF,OAAO,IAAIrI,EAAiBC,EAAcC,EAAQiC,IAElDiJ,EAAWlL,EAA2BA,EAAOP,IAAIuQ,GAA7BA,IAExB,OADA9R,KAAK4K,gBAAgB1D,KAAK8F,GACnBA,GAEJlD,EA1biB,GA4bxBkI,EAAW,KAIf,SAASzG,IACL,OAAOyG,EAAWA,GAAY,IAAIlI,EA0BtC,SAASmI,EAAO5B,EAAQjQ,GACpB,IAAIkL,EAAUC,IACd,OAAI8E,EAAO6B,QAAQ5K,IAAuB,EAE/B,WACH,IAAItF,EAAQhC,KAGZ,OAAOsL,EAAQQ,oBAAoBiC,KAAK,WACpC,IAAIoE,EAAY7G,EAAQtK,IAAIsG,GAE5B,OADAgE,EAAQ8E,QAAQC,EAAQjQ,EAAI4B,GACrBmQ,EAAUC,WAMlB,WAAc,OAAO9G,EAAQ8E,QAAQC,EAAQjQ,EAAIJ,OAMhE,IAAIqS,EAAoC,WACpC,SAASA,EAAmBC,GACxBtS,KAAKsS,WAAaA,EAgBtB,OAdAD,EAAmB1O,UAAU4O,WAAa,WACtC,IAAI1G,EAAY7L,KAAKsS,aACjBzG,GACAN,IAAaK,uBAAuBC,IAG5CwG,EAAmB1O,UAAUsO,OAAS,SAAU5B,EAAQjQ,GACpD,IAAIoS,EAAOxS,KAEX,OAAO,WAEH,OADAwS,EAAKD,aACEN,EAAO5B,EAAQjQ,GAAIqG,KAAKzG,QAGhCqS,EAlB4B,GAyCnCI,EAA+B,oBAAXvS,OAAyBZ,OAASY,OAEtDuS,EAAUC,YACVD,EAAUC,WAAW,WACjB5I,EAAQ2B,qBACRhG,MAqER,IAAIkN,OAAgB/R,EAChBgS,OAA6BhS,EAC7BiS,OAAYjS,EACZkS,EAA6B,EAC7BC,EAAK,SAAUC,GACf,GAAqB,iBAAV1T,QAAsBA,OAAO2T,SAA6B,mBAAXvT,QACtD,IACI,OAAOA,QAAQsT,GAEnB,MAAOhM,IAKX,OAAO,MAOPgM,EAAS,EAAK,UAKlB,SAASE,IACL,GAAIF,EAAQ,CAER,IAAIG,EAAWH,EAAOI,aAAa,GAAI,oBACvCT,EAAgBrT,OAAO+T,SACvB/T,OAAOY,OAASiT,EAChB7T,OAAO+T,SAAWF,EAASE,SAK3B/T,OAAOgU,MAAQ,KACfT,EAAYvT,OAAOiU,KACnBjU,OAAOiU,KAAOP,EAAOQ,KAAKD,KAC1BX,EAA6BtT,OAAOmU,sBACpCnU,OAAOmU,sBAAwB,SAAUC,GAErC,OADAC,aAAaD,GACNZ,MAQnB,SAASc,IACDjB,IACArT,OAAO+T,SAAWV,EAClBrT,OAAOY,YAASU,EAChB+R,OAAgB/R,GAEhBiS,IACAvT,OAAOiU,KAAOV,EACdA,OAAYjS,GAEZgS,IACAtT,OAAOmU,sBAAwBb,EAC/BA,OAA6BhS,GAGZ,mBAAd8R,YACPA,WAAWQ,GACS,mBAAbW,WACPnB,WAAWkB;;;;;;;;;;;;;;;;;;;;;;AA+BfpU,EAAQsU,MA11CR,SAASA,EAAM1T,GACX,IAAIyE,EAAwB,oBAATpE,KAAuBA,KAAO,KACjD,IAAKoE,EACD,OAAO,WACH,OAAOX,QAAQ6P,OAAO,4IAI9B,IAAIC,EAAYnP,GAASA,EAAMA,EAAMW,WAAW,cAChD,MAAyB,mBAAdwO,EACAA,EAAU5T,GA9GzB,SAAS6T,EAAc7T,GAGnB,OAAIH,EAAQiU,QAED,SAAUtN,GACRA,KAGDA,EAAO,cACFa,KAAO,SAAUT,GAAK,MAAMA,IAErC7G,EAAcC,EAAIJ,KAAM4G,EAAM,SAAUuN,GACpC,GAAmB,iBAARA,EACP,OAAOvN,EAAKa,KAAK,IAAI5G,MAAMsT,IAG3BvN,EAAKa,KAAK0M,MASnB,WACH,IAAInS,EAAQhC,KACZ,OAAO,IAAIkE,QAAQ,SAAU5D,EAAgBC,GACzCJ,EAAcC,EAAI4B,EAAO1B,EAAgBC,MAsF1C0T,CAAc7T,IA40CzBZ,EAAQoC,iBAAmBA,EAC3BpC,EAAQiG,mBAAqBA,EAC7BjG,EAAQ4U,UAz9BR,SAASA,EAAUhU,GACf,OAAImF,EACOA,EAAoB6O,UAAUhU,GA/I7C,SAASiU,EAAkBjU,GAEvB,OAAO,WAEH,IADA,IAAIsP,KACK4E,EAAK,EAAGA,EAAKlN,UAAUV,OAAQ4N,IACpC5E,EAAK4E,GAAMlN,UAAUkN,GAEzB,IAAIvT,EAAgBD,EAAcG,gBAClC,GAAIiE,EACA,MAAM,IAAIrE,MAAM,uCAEpBqE,GAAmB,EACnB,IACI,IAAKH,EAAwB,CACzB,GAAIhE,EAAcM,wBAAyByD,EACvC,MAAM,IAAIjE,MAAM,uCAEpBkE,EAAyB,IAAID,EAEjC,IAAIV,OAAM,EACNmQ,EAAoBxT,EAAcM,cACtCN,EAAcU,YAAYsD,GAC1B,IACIX,EAAMhE,EAAG6H,MAAMjI,KAAM0P,GACrBtK,IAEJ,QACIrE,EAAcU,YAAY8S,GAE9B,GAAIxP,EAAuByP,sBAAsB9N,OAAS,EACtD,MAAM,IAAI7F,MAAMkE,EAAuByP,sBAAsB9N,OAAS,0CAG1E,GAAI3B,EAAuB0P,cAAc/N,OAAS,EAC9C,MAAM,IAAI7F,MAAMkE,EAAuB0P,cAAc/N,OAAS,iCAElE,OAAOtC,EAEX,QACIc,GAAmB,EACnBF,MA0GGqP,CAAkBjU,IAq9BjCZ,EAAQkV,KAr8BR,SAASA,EAAKC,GAEV,YADe,IAAXA,IAAqBA,EAAS,GAC9BpP,EACOA,EAAoBmP,KAAKC,GAtGxC,SAASC,EAAaD,QACH,IAAXA,IAAqBA,EAAS,GAClCxP,IAAwBuP,KAAKC,GAuGlBC,CAAaD,IAg8B5BnV,EAAQqV,MAn7BR,SAASA,EAAMC,GACX,OAAIvP,EACOA,EAAoBsP,MAAMC,GA1GzC,SAASC,EAAcD,GACnB,OAAO3P,IAAwB0P,MAAMC,GA4G1BC,CAAcD,IA+6B7BtV,EAAQwV,qBAv6BR,SAASA,IACL,GAAIzP,EACA,OAAOA,EAAoByP,wBA/GnC,SAASC,IACU9P,IAENqP,sBAAsB9N,OAAS,EA+GpCuO,IAm6BRzV,EAAQ6F,gBA35BR,SAASA,IACL,OAAIE,EACOA,EAAoBF,kBAGpBD,KAu5Bf5F,EAAQ+J,sBAAwBA,EAChC/J,EAAQmK,2BAA6BA,EACrCnK,EAAQqK,yBAA2BA,EACnCrK,EAAQsK,QAAUA,EAClBtK,EAAQ+L,WAAaA,EACrB/L,EAAQyS,OAASA,EACjBzS,EAAQ6S,mBAAqBA,EAC7B7S,EAAQ0V,WAlNR,SAASA,EAAWrJ,EAAWzL,GAC3B,OAAIA,EAEO,WACH,IAAIkL,EAAUC,IAId,OAHIM,GACAP,EAAQM,uBAAuBC,GAE5BzL,EAAG6H,MAAMjI,OAGjB,IAAIqS,EAAmB,WAAc,OAAOxG;;;;;;;QAwMvDrM,EAAQ2V,qCApLmC,GAqL3C3V,EAAQ4V,iBAAmBrN,EAC3BvI,EAAQ6V,wBAA0BhM,EAClC7J,EAAQ8V;;;;;;;;;;;;;;;AAzIR,SAASA,EAASC,EAAMC,GACpB,OAAO,SAAU5O,GAEb,GADAsM,IACuB,mBAAZsC,EAAwB,CAC/BnC,SAASoC,KAAKC,UAAYH,EAI1B,IAAII,EAAcH,IACdG,aAAuBzR,QACvByR,EAAcA,EAAY5H,KAAKnH,EAAMA,EAAKa,MAG1Cb,OA6HhBpH,EAAQ0T,eAAiBA,EACzB1T,EAAQoU,gBAAkBA,EAC1BpU,EAAQuT,GAAKA,EAEbpN,OAAOgC,eAAenI,EAAS,cAAgBmH,OAAO","sourcesContent":["/**\n * @license Angular v6.0.9\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :\n    typeof define === 'function' && define.amd ? define('@angular/core/testing', ['exports', '@angular/core'], factory) :\n    (factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}, global.ng.core.testing = {}),global.ng.core));\n}(this, (function (exports,core) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _global = (typeof window === 'undefined' ? global : window);\n    /**\n     * Wraps a test function in an asynchronous test zone. The test will automatically\n     * complete when all asynchronous calls within this zone are done. Can be used\n     * to wrap an {@link inject} call.\n     *\n     * Example:\n     *\n     * ```\n     * it('...', async(inject([AClass], (object) => {\n     *   object.doSomething.then(() => {\n     *     expect(...);\n     *   })\n     * });\n     * ```\n     *\n     *\n     */\n    function asyncFallback(fn) {\n        // If we're running using the Jasmine test framework, adapt to call the 'done'\n        // function when asynchronous activity is finished.\n        if (_global.jasmine) {\n            // Not using an arrow function to preserve context passed from call site\n            return function (done) {\n                if (!done) {\n                    // if we run beforeEach in @angular/core/testing/testing_internal then we get no done\n                    // fake it here and assume sync.\n                    done = function () { };\n                    done.fail = function (e) { throw e; };\n                }\n                runInTestZone(fn, this, done, function (err) {\n                    if (typeof err === 'string') {\n                        return done.fail(new Error(err));\n                    }\n                    else {\n                        done.fail(err);\n                    }\n                });\n            };\n        }\n        // Otherwise, return a promise which will resolve when asynchronous activity\n        // is finished. This will be correctly consumed by the Mocha framework with\n        // it('...', async(myFn)); or can be used in a custom framework.\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            var _this = this;\n            return new Promise(function (finishCallback, failCallback) {\n                runInTestZone(fn, _this, finishCallback, failCallback);\n            });\n        };\n    }\n    function runInTestZone(fn, context, finishCallback, failCallback) {\n        var currentZone = Zone.current;\n        var AsyncTestZoneSpec = Zone['AsyncTestZoneSpec'];\n        if (AsyncTestZoneSpec === undefined) {\n            throw new Error('AsyncTestZoneSpec is needed for the async() test helper but could not be found. ' +\n                'Please make sure that your environment includes zone.js/dist/async-test.js');\n        }\n        var ProxyZoneSpec = Zone['ProxyZoneSpec'];\n        if (ProxyZoneSpec === undefined) {\n            throw new Error('ProxyZoneSpec is needed for the async() test helper but could not be found. ' +\n                'Please make sure that your environment includes zone.js/dist/proxy.js');\n        }\n        var proxyZoneSpec = ProxyZoneSpec.get();\n        ProxyZoneSpec.assertPresent();\n        // We need to create the AsyncTestZoneSpec outside the ProxyZone.\n        // If we do it in ProxyZone then we will get to infinite recursion.\n        var proxyZone = Zone.current.getZoneWith('ProxyZoneSpec');\n        var previousDelegate = proxyZoneSpec.getDelegate();\n        proxyZone.parent.run(function () {\n            var testZoneSpec = new AsyncTestZoneSpec(function () {\n                // Need to restore the original zone.\n                currentZone.run(function () {\n                    if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                        // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n                        proxyZoneSpec.setDelegate(previousDelegate);\n                    }\n                    finishCallback();\n                });\n            }, function (error) {\n                // Need to restore the original zone.\n                currentZone.run(function () {\n                    if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                        // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n                        proxyZoneSpec.setDelegate(previousDelegate);\n                    }\n                    failCallback(error);\n                });\n            }, 'test');\n            proxyZoneSpec.setDelegate(testZoneSpec);\n        });\n        return Zone.current.runGuarded(fn, context);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Wraps a test function in an asynchronous test zone. The test will automatically\n     * complete when all asynchronous calls within this zone are done. Can be used\n     * to wrap an {@link inject} call.\n     *\n     * Example:\n     *\n     * ```\n     * it('...', async(inject([AClass], (object) => {\n     *   object.doSomething.then(() => {\n     *     expect(...);\n     *   })\n     * });\n     * ```\n     *\n     *\n     */\n    function async(fn) {\n        var _Zone = typeof Zone !== 'undefined' ? Zone : null;\n        if (!_Zone) {\n            return function () {\n                return Promise.reject('Zone is needed for the async() test helper but could not be found. ' +\n                    'Please make sure that your environment includes zone.js/dist/zone.js');\n            };\n        }\n        var asyncTest = _Zone && _Zone[_Zone.__symbol__('asyncTest')];\n        if (typeof asyncTest === 'function') {\n            return asyncTest(fn);\n        }\n        // not using new version of zone.js\n        // TODO @JiaLiPassion, remove this after all library updated to\n        // newest version of zone.js(0.8.25)\n        return asyncFallback(fn);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Fixture for debugging and testing a component.\n     *\n     *\n     */\n    var ComponentFixture = /** @class */ (function () {\n        function ComponentFixture(componentRef, ngZone, _autoDetect) {\n            var _this = this;\n            this.componentRef = componentRef;\n            this.ngZone = ngZone;\n            this._autoDetect = _autoDetect;\n            this._isStable = true;\n            this._isDestroyed = false;\n            this._resolve = null;\n            this._promise = null;\n            this._onUnstableSubscription = null;\n            this._onStableSubscription = null;\n            this._onMicrotaskEmptySubscription = null;\n            this._onErrorSubscription = null;\n            this.changeDetectorRef = componentRef.changeDetectorRef;\n            this.elementRef = componentRef.location;\n            this.debugElement = core.getDebugNode(this.elementRef.nativeElement);\n            this.componentInstance = componentRef.instance;\n            this.nativeElement = this.elementRef.nativeElement;\n            this.componentRef = componentRef;\n            this.ngZone = ngZone;\n            if (ngZone) {\n                // Create subscriptions outside the NgZone so that the callbacks run oustide\n                // of NgZone.\n                ngZone.runOutsideAngular(function () {\n                    _this._onUnstableSubscription =\n                        ngZone.onUnstable.subscribe({ next: function () { _this._isStable = false; } });\n                    _this._onMicrotaskEmptySubscription = ngZone.onMicrotaskEmpty.subscribe({\n                        next: function () {\n                            if (_this._autoDetect) {\n                                // Do a change detection run with checkNoChanges set to true to check\n                                // there are no changes on the second run.\n                                _this.detectChanges(true);\n                            }\n                        }\n                    });\n                    _this._onStableSubscription = ngZone.onStable.subscribe({\n                        next: function () {\n                            _this._isStable = true;\n                            // Check whether there is a pending whenStable() completer to resolve.\n                            if (_this._promise !== null) {\n                                // If so check whether there are no pending macrotasks before resolving.\n                                // Do this check in the next tick so that ngZone gets a chance to update the state of\n                                // pending macrotasks.\n                                scheduleMicroTask(function () {\n                                    if (!ngZone.hasPendingMacrotasks) {\n                                        if (_this._promise !== null) {\n                                            _this._resolve(true);\n                                            _this._resolve = null;\n                                            _this._promise = null;\n                                        }\n                                    }\n                                });\n                            }\n                        }\n                    });\n                    _this._onErrorSubscription =\n                        ngZone.onError.subscribe({ next: function (error) { throw error; } });\n                });\n            }\n        }\n        ComponentFixture.prototype._tick = function (checkNoChanges) {\n            this.changeDetectorRef.detectChanges();\n            if (checkNoChanges) {\n                this.checkNoChanges();\n            }\n        };\n        /**\n         * Trigger a change detection cycle for the component.\n         */\n        ComponentFixture.prototype.detectChanges = function (checkNoChanges) {\n            var _this = this;\n            if (checkNoChanges === void 0) { checkNoChanges = true; }\n            if (this.ngZone != null) {\n                // Run the change detection inside the NgZone so that any async tasks as part of the change\n                // detection are captured by the zone and can be waited for in isStable.\n                this.ngZone.run(function () { _this._tick(checkNoChanges); });\n            }\n            else {\n                // Running without zone. Just do the change detection.\n                this._tick(checkNoChanges);\n            }\n        };\n        /**\n         * Do a change detection run to make sure there were no changes.\n         */\n        ComponentFixture.prototype.checkNoChanges = function () { this.changeDetectorRef.checkNoChanges(); };\n        /**\n         * Set whether the fixture should autodetect changes.\n         *\n         * Also runs detectChanges once so that any existing change is detected.\n         */\n        ComponentFixture.prototype.autoDetectChanges = function (autoDetect) {\n            if (autoDetect === void 0) { autoDetect = true; }\n            if (this.ngZone == null) {\n                throw new Error('Cannot call autoDetectChanges when ComponentFixtureNoNgZone is set');\n            }\n            this._autoDetect = autoDetect;\n            this.detectChanges();\n        };\n        /**\n         * Return whether the fixture is currently stable or has async tasks that have not been completed\n         * yet.\n         */\n        ComponentFixture.prototype.isStable = function () { return this._isStable && !this.ngZone.hasPendingMacrotasks; };\n        /**\n         * Get a promise that resolves when the fixture is stable.\n         *\n         * This can be used to resume testing after events have triggered asynchronous activity or\n         * asynchronous change detection.\n         */\n        ComponentFixture.prototype.whenStable = function () {\n            var _this = this;\n            if (this.isStable()) {\n                return Promise.resolve(false);\n            }\n            else if (this._promise !== null) {\n                return this._promise;\n            }\n            else {\n                this._promise = new Promise(function (res) { _this._resolve = res; });\n                return this._promise;\n            }\n        };\n        ComponentFixture.prototype._getRenderer = function () {\n            if (this._renderer === undefined) {\n                this._renderer = this.componentRef.injector.get(core.RendererFactory2, null);\n            }\n            return this._renderer;\n        };\n        /**\n          * Get a promise that resolves when the ui state is stable following animations.\n          */\n        ComponentFixture.prototype.whenRenderingDone = function () {\n            var renderer = this._getRenderer();\n            if (renderer && renderer.whenRenderingDone) {\n                return renderer.whenRenderingDone();\n            }\n            return this.whenStable();\n        };\n        /**\n         * Trigger component destruction.\n         */\n        ComponentFixture.prototype.destroy = function () {\n            if (!this._isDestroyed) {\n                this.componentRef.destroy();\n                if (this._onUnstableSubscription != null) {\n                    this._onUnstableSubscription.unsubscribe();\n                    this._onUnstableSubscription = null;\n                }\n                if (this._onStableSubscription != null) {\n                    this._onStableSubscription.unsubscribe();\n                    this._onStableSubscription = null;\n                }\n                if (this._onMicrotaskEmptySubscription != null) {\n                    this._onMicrotaskEmptySubscription.unsubscribe();\n                    this._onMicrotaskEmptySubscription = null;\n                }\n                if (this._onErrorSubscription != null) {\n                    this._onErrorSubscription.unsubscribe();\n                    this._onErrorSubscription = null;\n                }\n                this._isDestroyed = true;\n            }\n        };\n        return ComponentFixture;\n    }());\n    function scheduleMicroTask(fn) {\n        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * fakeAsync has been moved to zone.js\n     * this file is for fallback in case old version of zone.js is used\n     */\n    var _Zone = typeof Zone !== 'undefined' ? Zone : null;\n    var FakeAsyncTestZoneSpec = _Zone && _Zone['FakeAsyncTestZoneSpec'];\n    var ProxyZoneSpec = _Zone && _Zone['ProxyZoneSpec'];\n    var _fakeAsyncTestZoneSpec = null;\n    /**\n     * Clears out the shared fake async zone for a test.\n     * To be called in a global `beforeEach`.\n     *\n     * @experimental\n     */\n    function resetFakeAsyncZoneFallback() {\n        _fakeAsyncTestZoneSpec = null;\n        // in node.js testing we may not have ProxyZoneSpec in which case there is nothing to reset.\n        ProxyZoneSpec && ProxyZoneSpec.assertPresent().resetDelegate();\n    }\n    var _inFakeAsyncCall = false;\n    /**\n     * Wraps a function to be executed in the fakeAsync zone:\n     * - microtasks are manually executed by calling `flushMicrotasks()`,\n     * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n     *\n     * If there are any pending timers at the end of the function, an exception will be thrown.\n     *\n     * Can be used to wrap inject() calls.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @param fn\n     * @returns The function wrapped to be executed in the fakeAsync zone\n     *\n     * @experimental\n     */\n    function fakeAsyncFallback(fn) {\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var proxyZoneSpec = ProxyZoneSpec.assertPresent();\n            if (_inFakeAsyncCall) {\n                throw new Error('fakeAsync() calls can not be nested');\n            }\n            _inFakeAsyncCall = true;\n            try {\n                if (!_fakeAsyncTestZoneSpec) {\n                    if (proxyZoneSpec.getDelegate() instanceof FakeAsyncTestZoneSpec) {\n                        throw new Error('fakeAsync() calls can not be nested');\n                    }\n                    _fakeAsyncTestZoneSpec = new FakeAsyncTestZoneSpec();\n                }\n                var res = void 0;\n                var lastProxyZoneSpec = proxyZoneSpec.getDelegate();\n                proxyZoneSpec.setDelegate(_fakeAsyncTestZoneSpec);\n                try {\n                    res = fn.apply(this, args);\n                    flushMicrotasksFallback();\n                }\n                finally {\n                    proxyZoneSpec.setDelegate(lastProxyZoneSpec);\n                }\n                if (_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length > 0) {\n                    throw new Error(_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length + \" \" +\n                        \"periodic timer(s) still in the queue.\");\n                }\n                if (_fakeAsyncTestZoneSpec.pendingTimers.length > 0) {\n                    throw new Error(_fakeAsyncTestZoneSpec.pendingTimers.length + \" timer(s) still in the queue.\");\n                }\n                return res;\n            }\n            finally {\n                _inFakeAsyncCall = false;\n                resetFakeAsyncZoneFallback();\n            }\n        };\n    }\n    function _getFakeAsyncZoneSpec() {\n        if (_fakeAsyncTestZoneSpec == null) {\n            throw new Error('The code should be running in the fakeAsync zone to call this function');\n        }\n        return _fakeAsyncTestZoneSpec;\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n     *\n     * The microtasks queue is drained at the very start of this function and after any timer callback\n     * has been executed.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @experimental\n     */\n    function tickFallback(millis) {\n        if (millis === void 0) { millis = 0; }\n        _getFakeAsyncZoneSpec().tick(millis);\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n     * draining the macrotask queue until it is empty. The returned value is the milliseconds\n     * of time that would have been elapsed.\n     *\n     * @param maxTurns\n     * @returns The simulated time elapsed, in millis.\n     *\n     * @experimental\n     */\n    function flushFallback(maxTurns) {\n        return _getFakeAsyncZoneSpec().flush(maxTurns);\n    }\n    /**\n     * Discard all remaining periodic tasks.\n     *\n     * @experimental\n     */\n    function discardPeriodicTasksFallback() {\n        var zoneSpec = _getFakeAsyncZoneSpec();\n        var pendingTimers = zoneSpec.pendingPeriodicTimers;\n        zoneSpec.pendingPeriodicTimers.length = 0;\n    }\n    /**\n     * Flush any pending microtasks.\n     *\n     * @experimental\n     */\n    function flushMicrotasksFallback() {\n        _getFakeAsyncZoneSpec().flushMicrotasks();\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _Zone$1 = typeof Zone !== 'undefined' ? Zone : null;\n    var fakeAsyncTestModule = _Zone$1 && _Zone$1[_Zone$1.__symbol__('fakeAsyncTest')];\n    /**\n     * Clears out the shared fake async zone for a test.\n     * To be called in a global `beforeEach`.\n     *\n     * @experimental\n     */\n    function resetFakeAsyncZone() {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.resetFakeAsyncZone();\n        }\n        else {\n            return resetFakeAsyncZoneFallback();\n        }\n    }\n    /**\n     * Wraps a function to be executed in the fakeAsync zone:\n     * - microtasks are manually executed by calling `flushMicrotasks()`,\n     * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n     *\n     * If there are any pending timers at the end of the function, an exception will be thrown.\n     *\n     * Can be used to wrap inject() calls.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @param fn\n     * @returns The function wrapped to be executed in the fakeAsync zone\n     *\n     * @experimental\n     */\n    function fakeAsync(fn) {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.fakeAsync(fn);\n        }\n        else {\n            return fakeAsyncFallback(fn);\n        }\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n     *\n     * The microtasks queue is drained at the very start of this function and after any timer callback\n     * has been executed.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @experimental\n     */\n    function tick(millis) {\n        if (millis === void 0) { millis = 0; }\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.tick(millis);\n        }\n        else {\n            return tickFallback(millis);\n        }\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n     * draining the macrotask queue until it is empty. The returned value is the milliseconds\n     * of time that would have been elapsed.\n     *\n     * @param maxTurns\n     * @returns The simulated time elapsed, in millis.\n     *\n     * @experimental\n     */\n    function flush(maxTurns) {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.flush(maxTurns);\n        }\n        else {\n            return flushFallback(maxTurns);\n        }\n    }\n    /**\n     * Discard all remaining periodic tasks.\n     *\n     * @experimental\n     */\n    function discardPeriodicTasks() {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.discardPeriodicTasks();\n        }\n        else {\n            discardPeriodicTasksFallback();\n        }\n    }\n    /**\n     * Flush any pending microtasks.\n     *\n     * @experimental\n     */\n    function flushMicrotasks() {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.flushMicrotasks();\n        }\n        else {\n            return flushMicrotasksFallback();\n        }\n    }\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Injectable completer that allows signaling completion of an asynchronous test. Used internally.\n     */\n    var AsyncTestCompleter = /** @class */ (function () {\n        function AsyncTestCompleter() {\n            var _this = this;\n            this._promise = new Promise(function (res, rej) {\n                _this._resolve = res;\n                _this._reject = rej;\n            });\n        }\n        AsyncTestCompleter.prototype.done = function (value) { this._resolve(value); };\n        AsyncTestCompleter.prototype.fail = function (error, stackTrace) { this._reject(error); };\n        Object.defineProperty(AsyncTestCompleter.prototype, \"promise\", {\n            get: function () { return this._promise; },\n            enumerable: true,\n            configurable: true\n        });\n        return AsyncTestCompleter;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function unimplemented() {\n        throw Error('unimplemented');\n    }\n    /**\n     * Special interface to the compiler only used by testing\n     *\n     * @experimental\n     */\n    var TestingCompiler = /** @class */ (function (_super) {\n        __extends(TestingCompiler, _super);\n        function TestingCompiler() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(TestingCompiler.prototype, \"injector\", {\n            get: function () { throw unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        TestingCompiler.prototype.overrideModule = function (module, overrides) {\n            throw unimplemented();\n        };\n        TestingCompiler.prototype.overrideDirective = function (directive, overrides) {\n            throw unimplemented();\n        };\n        TestingCompiler.prototype.overrideComponent = function (component, overrides) {\n            throw unimplemented();\n        };\n        TestingCompiler.prototype.overridePipe = function (directive, overrides) {\n            throw unimplemented();\n        };\n        /**\n         * Allows to pass the compile summary from AOT compilation to the JIT compiler,\n         * so that it can use the code generated by AOT.\n         */\n        TestingCompiler.prototype.loadAotSummaries = function (summaries) { throw unimplemented(); };\n        /**\n         * Gets the component factory for the given component.\n         * This assumes that the component has been compiled before calling this call using\n         * `compileModuleAndAllComponents*`.\n         */\n        TestingCompiler.prototype.getComponentFactory = function (component) { throw unimplemented(); };\n        /**\n         * Returns the component type that is stored in the given error.\n         * This can be used for errors created by compileModule...\n         */\n        TestingCompiler.prototype.getComponentFromError = function (error) { throw unimplemented(); };\n        TestingCompiler.decorators = [\n            { type: core.Injectable }\n        ];\n        return TestingCompiler;\n    }(core.Compiler));\n    /**\n     * A factory for creating a Compiler\n     *\n     * @experimental\n     */\n    var TestingCompilerFactory = /** @class */ (function () {\n        function TestingCompilerFactory() {\n        }\n        return TestingCompilerFactory;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var UNDEFINED = new Object();\n    /**\n     * An abstract class for inserting the root test component element in a platform independent way.\n     *\n     * @experimental\n     */\n    var TestComponentRenderer = /** @class */ (function () {\n        function TestComponentRenderer() {\n        }\n        TestComponentRenderer.prototype.insertRootElement = function (rootElementId) { };\n        return TestComponentRenderer;\n    }());\n    var _nextRootElementId = 0;\n    /**\n     * @experimental\n     */\n    var ComponentFixtureAutoDetect = new core.InjectionToken('ComponentFixtureAutoDetect');\n    /**\n     * @experimental\n     */\n    var ComponentFixtureNoNgZone = new core.InjectionToken('ComponentFixtureNoNgZone');\n    /**\n     * @description\n     * Configures and initializes environment for unit testing and provides methods for\n     * creating components and services in unit tests.\n     *\n     * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n     *\n     *\n     */\n    var TestBed = /** @class */ (function () {\n        function TestBed() {\n            this._instantiated = false;\n            this._compiler = null;\n            this._moduleRef = null;\n            this._moduleFactory = null;\n            this._compilerOptions = [];\n            this._moduleOverrides = [];\n            this._componentOverrides = [];\n            this._directiveOverrides = [];\n            this._pipeOverrides = [];\n            this._providers = [];\n            this._declarations = [];\n            this._imports = [];\n            this._schemas = [];\n            this._activeFixtures = [];\n            this._testEnvAotSummaries = function () { return []; };\n            this._aotSummaries = [];\n            this._templateOverrides = [];\n            this._isRoot = true;\n            this._rootProviderOverrides = [];\n            this.platform = null;\n            this.ngModule = null;\n        }\n        /**\n         * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n         * angular module. These are common to every test in the suite.\n         *\n         * This may only be called once, to set up the common providers for the current test\n         * suite on the current platform. If you absolutely need to change the providers,\n         * first use `resetTestEnvironment`.\n         *\n         * Test modules and platforms for individual platforms are available from\n         * '@angular/<platform_name>/testing'.\n         *\n         * @experimental\n         */\n        TestBed.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n            var testBed = getTestBed();\n            testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n            return testBed;\n        };\n        /**\n         * Reset the providers for the test injector.\n         *\n         * @experimental\n         */\n        TestBed.resetTestEnvironment = function () { getTestBed().resetTestEnvironment(); };\n        TestBed.resetTestingModule = function () {\n            getTestBed().resetTestingModule();\n            return TestBed;\n        };\n        /**\n         * Allows overriding default compiler providers and settings\n         * which are defined in test_injector.js\n         */\n        TestBed.configureCompiler = function (config) {\n            getTestBed().configureCompiler(config);\n            return TestBed;\n        };\n        /**\n         * Allows overriding default providers, directives, pipes, modules of the test injector,\n         * which are defined in test_injector.js\n         */\n        TestBed.configureTestingModule = function (moduleDef) {\n            getTestBed().configureTestingModule(moduleDef);\n            return TestBed;\n        };\n        /**\n         * Compile components with a `templateUrl` for the test's NgModule.\n         * It is necessary to call this function\n         * as fetching urls is asynchronous.\n         */\n        TestBed.compileComponents = function () { return getTestBed().compileComponents(); };\n        TestBed.overrideModule = function (ngModule, override) {\n            getTestBed().overrideModule(ngModule, override);\n            return TestBed;\n        };\n        TestBed.overrideComponent = function (component, override) {\n            getTestBed().overrideComponent(component, override);\n            return TestBed;\n        };\n        TestBed.overrideDirective = function (directive, override) {\n            getTestBed().overrideDirective(directive, override);\n            return TestBed;\n        };\n        TestBed.overridePipe = function (pipe, override) {\n            getTestBed().overridePipe(pipe, override);\n            return TestBed;\n        };\n        TestBed.overrideTemplate = function (component, template) {\n            getTestBed().overrideComponent(component, { set: { template: template, templateUrl: null } });\n            return TestBed;\n        };\n        /**\n         * Overrides the template of the given component, compiling the template\n         * in the context of the TestingModule.\n         *\n         * Note: This works for JIT and AOTed components as well.\n         */\n        TestBed.overrideTemplateUsingTestingModule = function (component, template) {\n            getTestBed().overrideTemplateUsingTestingModule(component, template);\n            return TestBed;\n        };\n        TestBed.overrideProvider = function (token, provider) {\n            getTestBed().overrideProvider(token, provider);\n            return TestBed;\n        };\n        TestBed.deprecatedOverrideProvider = function (token, provider) {\n            getTestBed().deprecatedOverrideProvider(token, provider);\n            return TestBed;\n        };\n        TestBed.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n            return getTestBed().get(token, notFoundValue);\n        };\n        TestBed.createComponent = function (component) {\n            return getTestBed().createComponent(component);\n        };\n        /**\n         * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n         * angular module. These are common to every test in the suite.\n         *\n         * This may only be called once, to set up the common providers for the current test\n         * suite on the current platform. If you absolutely need to change the providers,\n         * first use `resetTestEnvironment`.\n         *\n         * Test modules and platforms for individual platforms are available from\n         * '@angular/<platform_name>/testing'.\n         *\n         * @experimental\n         */\n        TestBed.prototype.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n            if (this.platform || this.ngModule) {\n                throw new Error('Cannot set base providers because it has already been called');\n            }\n            this.platform = platform;\n            this.ngModule = ngModule;\n            if (aotSummaries) {\n                this._testEnvAotSummaries = aotSummaries;\n            }\n        };\n        /**\n         * Reset the providers for the test injector.\n         *\n         * @experimental\n         */\n        TestBed.prototype.resetTestEnvironment = function () {\n            this.resetTestingModule();\n            this.platform = null;\n            this.ngModule = null;\n            this._testEnvAotSummaries = function () { return []; };\n        };\n        TestBed.prototype.resetTestingModule = function () {\n            core.ɵclearOverrides();\n            this._aotSummaries = [];\n            this._templateOverrides = [];\n            this._compiler = null;\n            this._moduleOverrides = [];\n            this._componentOverrides = [];\n            this._directiveOverrides = [];\n            this._pipeOverrides = [];\n            this._isRoot = true;\n            this._rootProviderOverrides = [];\n            this._moduleRef = null;\n            this._moduleFactory = null;\n            this._compilerOptions = [];\n            this._providers = [];\n            this._declarations = [];\n            this._imports = [];\n            this._schemas = [];\n            this._instantiated = false;\n            this._activeFixtures.forEach(function (fixture) {\n                try {\n                    fixture.destroy();\n                }\n                catch (e) {\n                    console.error('Error during cleanup of component', {\n                        component: fixture.componentInstance,\n                        stacktrace: e,\n                    });\n                }\n            });\n            this._activeFixtures = [];\n        };\n        TestBed.prototype.configureCompiler = function (config) {\n            this._assertNotInstantiated('TestBed.configureCompiler', 'configure the compiler');\n            this._compilerOptions.push(config);\n        };\n        TestBed.prototype.configureTestingModule = function (moduleDef) {\n            this._assertNotInstantiated('TestBed.configureTestingModule', 'configure the test module');\n            if (moduleDef.providers) {\n                (_a = this._providers).push.apply(_a, __spread(moduleDef.providers));\n            }\n            if (moduleDef.declarations) {\n                (_b = this._declarations).push.apply(_b, __spread(moduleDef.declarations));\n            }\n            if (moduleDef.imports) {\n                (_c = this._imports).push.apply(_c, __spread(moduleDef.imports));\n            }\n            if (moduleDef.schemas) {\n                (_d = this._schemas).push.apply(_d, __spread(moduleDef.schemas));\n            }\n            if (moduleDef.aotSummaries) {\n                this._aotSummaries.push(moduleDef.aotSummaries);\n            }\n            var _a, _b, _c, _d;\n        };\n        TestBed.prototype.compileComponents = function () {\n            var _this = this;\n            if (this._moduleFactory || this._instantiated) {\n                return Promise.resolve(null);\n            }\n            var moduleType = this._createCompilerAndModule();\n            return this._compiler.compileModuleAndAllComponentsAsync(moduleType)\n                .then(function (moduleAndComponentFactories) {\n                _this._moduleFactory = moduleAndComponentFactories.ngModuleFactory;\n            });\n        };\n        TestBed.prototype._initIfNeeded = function () {\n            if (this._instantiated) {\n                return;\n            }\n            if (!this._moduleFactory) {\n                try {\n                    var moduleType = this._createCompilerAndModule();\n                    this._moduleFactory =\n                        this._compiler.compileModuleAndAllComponentsSync(moduleType).ngModuleFactory;\n                }\n                catch (e) {\n                    var errorCompType = this._compiler.getComponentFromError(e);\n                    if (errorCompType) {\n                        throw new Error(\"This test module uses the component \" + core.ɵstringify(errorCompType) + \" which is using a \\\"templateUrl\\\" or \\\"styleUrls\\\", but they were never compiled. \" +\n                            \"Please call \\\"TestBed.compileComponents\\\" before your test.\");\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            }\n            try {\n                for (var _a = __values(this._templateOverrides), _b = _a.next(); !_b.done; _b = _a.next()) {\n                    var _c = _b.value, component = _c.component, templateOf = _c.templateOf;\n                    var compFactory = this._compiler.getComponentFactory(templateOf);\n                    core.ɵoverrideComponentView(component, compFactory);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_b && !_b.done && (_d = _a.return)) _d.call(_a);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            var ngZone = new core.NgZone({ enableLongStackTrace: true });\n            var providers = [{ provide: core.NgZone, useValue: ngZone }];\n            var ngZoneInjector = core.Injector.create({\n                providers: providers,\n                parent: this.platform.injector,\n                name: this._moduleFactory.moduleType.name\n            });\n            this._moduleRef = this._moduleFactory.create(ngZoneInjector);\n            // ApplicationInitStatus.runInitializers() is marked @internal to core. So casting to any\n            // before accessing it.\n            this._moduleRef.injector.get(core.ApplicationInitStatus).runInitializers();\n            this._instantiated = true;\n            var e_1, _d;\n        };\n        TestBed.prototype._createCompilerAndModule = function () {\n            var _this = this;\n            var providers = this._providers.concat([{ provide: TestBed, useValue: this }]);\n            var declarations = __spread(this._declarations, this._templateOverrides.map(function (entry) { return entry.templateOf; }));\n            var rootScopeImports = [];\n            var rootProviderOverrides = this._rootProviderOverrides;\n            if (this._isRoot) {\n                var RootScopeModule = /** @class */ (function () {\n                    function RootScopeModule() {\n                    }\n                    RootScopeModule.decorators = [\n                        { type: core.NgModule, args: [{\n                                    providers: __spread(rootProviderOverrides),\n                                },] },\n                    ];\n                    return RootScopeModule;\n                }());\n                rootScopeImports.push(RootScopeModule);\n            }\n            providers.push({ provide: core.ɵAPP_ROOT, useValue: this._isRoot });\n            var imports = [rootScopeImports, this.ngModule, this._imports];\n            var schemas = this._schemas;\n            var DynamicTestModule = /** @class */ (function () {\n                function DynamicTestModule() {\n                }\n                DynamicTestModule.decorators = [\n                    { type: core.NgModule, args: [{ providers: providers, declarations: declarations, imports: imports, schemas: schemas },] },\n                ];\n                return DynamicTestModule;\n            }());\n            var compilerFactory = this.platform.injector.get(TestingCompilerFactory);\n            this._compiler = compilerFactory.createTestingCompiler(this._compilerOptions);\n            try {\n                for (var _a = __values(__spread([this._testEnvAotSummaries], this._aotSummaries)), _b = _a.next(); !_b.done; _b = _a.next()) {\n                    var summary = _b.value;\n                    this._compiler.loadAotSummaries(summary);\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            this._moduleOverrides.forEach(function (entry) { return _this._compiler.overrideModule(entry[0], entry[1]); });\n            this._componentOverrides.forEach(function (entry) { return _this._compiler.overrideComponent(entry[0], entry[1]); });\n            this._directiveOverrides.forEach(function (entry) { return _this._compiler.overrideDirective(entry[0], entry[1]); });\n            this._pipeOverrides.forEach(function (entry) { return _this._compiler.overridePipe(entry[0], entry[1]); });\n            return DynamicTestModule;\n            var e_2, _c;\n        };\n        TestBed.prototype._assertNotInstantiated = function (methodName, methodDescription) {\n            if (this._instantiated) {\n                throw new Error(\"Cannot \" + methodDescription + \" when the test module has already been instantiated. \" +\n                    (\"Make sure you are not using `inject` before `\" + methodName + \"`.\"));\n            }\n        };\n        TestBed.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n            this._initIfNeeded();\n            if (token === TestBed) {\n                return this;\n            }\n            // Tests can inject things from the ng module and from the compiler,\n            // but the ng module can't inject things from the compiler and vice versa.\n            var result = this._moduleRef.injector.get(token, UNDEFINED);\n            return result === UNDEFINED ? this._compiler.injector.get(token, notFoundValue) : result;\n        };\n        TestBed.prototype.execute = function (tokens, fn, context) {\n            var _this = this;\n            this._initIfNeeded();\n            var params = tokens.map(function (t) { return _this.get(t); });\n            return fn.apply(context, params);\n        };\n        TestBed.prototype.overrideModule = function (ngModule, override) {\n            this._assertNotInstantiated('overrideModule', 'override module metadata');\n            this._moduleOverrides.push([ngModule, override]);\n        };\n        TestBed.prototype.overrideComponent = function (component, override) {\n            this._assertNotInstantiated('overrideComponent', 'override component metadata');\n            this._componentOverrides.push([component, override]);\n        };\n        TestBed.prototype.overrideDirective = function (directive, override) {\n            this._assertNotInstantiated('overrideDirective', 'override directive metadata');\n            this._directiveOverrides.push([directive, override]);\n        };\n        TestBed.prototype.overridePipe = function (pipe, override) {\n            this._assertNotInstantiated('overridePipe', 'override pipe metadata');\n            this._pipeOverrides.push([pipe, override]);\n        };\n        TestBed.prototype.overrideProvider = function (token, provider) {\n            this.overrideProviderImpl(token, provider);\n        };\n        TestBed.prototype.deprecatedOverrideProvider = function (token, provider) {\n            this.overrideProviderImpl(token, provider, /* deprecated */ true);\n        };\n        TestBed.prototype.overrideProviderImpl = function (token, provider, deprecated) {\n            if (deprecated === void 0) { deprecated = false; }\n            if (typeof token !== 'string' && token.ngInjectableDef &&\n                token.ngInjectableDef.providedIn === 'root') {\n                if (provider.useFactory) {\n                    this._rootProviderOverrides.push({ provide: token, useFactory: provider.useFactory, deps: provider.deps || [] });\n                }\n                else {\n                    this._rootProviderOverrides.push({ provide: token, useValue: provider.useValue });\n                }\n            }\n            var flags = 0;\n            var value;\n            if (provider.useFactory) {\n                flags |= 1024 /* TypeFactoryProvider */;\n                value = provider.useFactory;\n            }\n            else {\n                flags |= 256 /* TypeValueProvider */;\n                value = provider.useValue;\n            }\n            var deps = (provider.deps || []).map(function (dep) {\n                var depFlags = 0 /* None */;\n                var depToken;\n                if (Array.isArray(dep)) {\n                    dep.forEach(function (entry) {\n                        if (entry instanceof core.Optional) {\n                            depFlags |= 2 /* Optional */;\n                        }\n                        else if (entry instanceof core.SkipSelf) {\n                            depFlags |= 1 /* SkipSelf */;\n                        }\n                        else {\n                            depToken = entry;\n                        }\n                    });\n                }\n                else {\n                    depToken = dep;\n                }\n                return [depFlags, depToken];\n            });\n            core.ɵoverrideProvider({ token: token, flags: flags, deps: deps, value: value, deprecatedBehavior: deprecated });\n        };\n        TestBed.prototype.overrideTemplateUsingTestingModule = function (component, template) {\n            this._assertNotInstantiated('overrideTemplateUsingTestingModule', 'override template');\n            var OverrideComponent = /** @class */ (function () {\n                function OverrideComponent() {\n                }\n                OverrideComponent.decorators = [\n                    { type: core.Component, args: [{ selector: 'empty', template: template },] },\n                ];\n                return OverrideComponent;\n            }());\n            this._templateOverrides.push({ component: component, templateOf: OverrideComponent });\n        };\n        TestBed.prototype.createComponent = function (component) {\n            var _this = this;\n            this._initIfNeeded();\n            var componentFactory = this._compiler.getComponentFactory(component);\n            if (!componentFactory) {\n                throw new Error(\"Cannot create the component \" + core.ɵstringify(component) + \" as it was not imported into the testing module!\");\n            }\n            var noNgZone = this.get(ComponentFixtureNoNgZone, false);\n            var autoDetect = this.get(ComponentFixtureAutoDetect, false);\n            var ngZone = noNgZone ? null : this.get(core.NgZone, null);\n            var testComponentRenderer = this.get(TestComponentRenderer);\n            var rootElId = \"root\" + _nextRootElementId++;\n            testComponentRenderer.insertRootElement(rootElId);\n            var initComponent = function () {\n                var componentRef = componentFactory.create(core.Injector.NULL, [], \"#\" + rootElId, _this._moduleRef);\n                return new ComponentFixture(componentRef, ngZone, autoDetect);\n            };\n            var fixture = !ngZone ? initComponent() : ngZone.run(initComponent);\n            this._activeFixtures.push(fixture);\n            return fixture;\n        };\n        return TestBed;\n    }());\n    var _testBed = null;\n    /**\n     * @experimental\n     */\n    function getTestBed() {\n        return _testBed = _testBed || new TestBed();\n    }\n    /**\n     * Allows injecting dependencies in `beforeEach()` and `it()`.\n     *\n     * Example:\n     *\n     * ```\n     * beforeEach(inject([Dependency, AClass], (dep, object) => {\n     *   // some code that uses `dep` and `object`\n     *   // ...\n     * }));\n     *\n     * it('...', inject([AClass], (object) => {\n     *   object.doSomething();\n     *   expect(...);\n     * })\n     * ```\n     *\n     * Notes:\n     * - inject is currently a function because of some Traceur limitation the syntax should\n     * eventually\n     *   becomes `it('...', @Inject (object: AClass, async: AsyncTestCompleter) => { ... });`\n     *\n     *\n     */\n    function inject(tokens, fn) {\n        var testBed = getTestBed();\n        if (tokens.indexOf(AsyncTestCompleter) >= 0) {\n            // Not using an arrow function to preserve context passed from call site\n            return function () {\n                var _this = this;\n                // Return an async test method that returns a Promise if AsyncTestCompleter is one of\n                // the injected tokens.\n                return testBed.compileComponents().then(function () {\n                    var completer = testBed.get(AsyncTestCompleter);\n                    testBed.execute(tokens, fn, _this);\n                    return completer.promise;\n                });\n            };\n        }\n        else {\n            // Not using an arrow function to preserve context passed from call site\n            return function () { return testBed.execute(tokens, fn, this); };\n        }\n    }\n    /**\n     * @experimental\n     */\n    var InjectSetupWrapper = /** @class */ (function () {\n        function InjectSetupWrapper(_moduleDef) {\n            this._moduleDef = _moduleDef;\n        }\n        InjectSetupWrapper.prototype._addModule = function () {\n            var moduleDef = this._moduleDef();\n            if (moduleDef) {\n                getTestBed().configureTestingModule(moduleDef);\n            }\n        };\n        InjectSetupWrapper.prototype.inject = function (tokens, fn) {\n            var self = this;\n            // Not using an arrow function to preserve context passed from call site\n            return function () {\n                self._addModule();\n                return inject(tokens, fn).call(this);\n            };\n        };\n        return InjectSetupWrapper;\n    }());\n    function withModule(moduleDef, fn) {\n        if (fn) {\n            // Not using an arrow function to preserve context passed from call site\n            return function () {\n                var testBed = getTestBed();\n                if (moduleDef) {\n                    testBed.configureTestingModule(moduleDef);\n                }\n                return fn.apply(this);\n            };\n        }\n        return new InjectSetupWrapper(function () { return moduleDef; });\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _global$1 = (typeof window === 'undefined' ? global : window);\n    // Reset the test providers and the fake async zone before each test.\n    if (_global$1.beforeEach) {\n        _global$1.beforeEach(function () {\n            TestBed.resetTestingModule();\n            resetFakeAsyncZone();\n        });\n    }\n    // TODO(juliemr): remove this, only used because we need to export something to have compilation\n    // work.\n    var __core_private_testing_placeholder__ = '';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n    * Wraps a function in a new function which sets up document and HTML for running a test.\n    *\n    * This function is intended to wrap an existing testing function. The wrapper\n    * adds HTML to the `body` element of the `document` and subsequently tears it down.\n    *\n    * This function is intended to be used with `async await` and `Promise`s. If the wrapped\n    * function returns a promise (or is `async`) then the teardown is delayed until that `Promise`\n    * is resolved.\n    *\n    * On `node` this function detects if `document` is present and if not it will create one by\n    * loading `domino` and installing it.\n    *\n    * Example:\n    *\n    * ```\n    * describe('something', () => {\n    *   it('should do something', withBody('<my-app></my-app>', async () => {\n    *     const myApp = renderComponent(MyApp);\n    *     await whenRendered(myApp);\n    *     expect(getRenderedText(myApp)).toEqual('Hello World!');\n    *   }));\n    * });\n    * ```\n    *\n    * @param html HTML which should be inserted into `body` of the `document`.\n    * @param blockFn function to wrap. The function can return promise or be `async`.\n    * @experimental\n    */\n    function withBody(html, blockFn) {\n        return function (done) {\n            ensureDocument();\n            if (typeof blockFn === 'function') {\n                document.body.innerHTML = html;\n                // TODO(i): I'm not sure why a cast is required here but otherwise I get\n                //   TS2349: Cannot invoke an expression whose type lacks a call signature. Type 'never' has\n                //   no compatible call signatures.\n                var blockReturn = blockFn();\n                if (blockReturn instanceof Promise) {\n                    blockReturn = blockReturn.then(done, done.fail);\n                }\n                else {\n                    done();\n                }\n            }\n        };\n    }\n    var savedDocument = undefined;\n    var savedRequestAnimationFrame = undefined;\n    var savedNode = undefined;\n    var requestAnimationFrameCount = 0;\n    var ɵ0 = function (domino) {\n        if (typeof global == 'object' && global.process && typeof require == 'function') {\n            try {\n                return require(domino);\n            }\n            catch (e) {\n                // It is possible that we don't have domino available in which case just give up.\n            }\n        }\n        // Seems like we don't have domino, give up.\n        return null;\n    };\n    /**\n     * System.js uses regexp to look for `require` statements. `domino` has to be\n     * extracted into a constant so that the regexp in the System.js does not match\n     * and does not try to load domino in the browser.\n     */\n    var domino = (ɵ0)('domino');\n    /**\n     * Ensure that global has `Document` if we are in node.js\n     * @experimental\n     */\n    function ensureDocument() {\n        if (domino) {\n            // we are in node.js.\n            var window_1 = domino.createWindow('', 'http://localhost');\n            savedDocument = global.document;\n            global.window = window_1;\n            global.document = window_1.document;\n            // Trick to avoid Event patching from\n            // https://github.com/angular/angular/blob/7cf5e95ac9f0f2648beebf0d5bd9056b79946970/packages/platform-browser/src/dom/events/dom_events.ts#L112-L132\n            // It fails with Domino with TypeError: Cannot assign to read only property\n            // 'stopImmediatePropagation' of object '#<Event>'\n            global.Event = null;\n            savedNode = global.Node;\n            global.Node = domino.impl.Node;\n            savedRequestAnimationFrame = global.requestAnimationFrame;\n            global.requestAnimationFrame = function (cb) {\n                setImmediate(cb);\n                return requestAnimationFrameCount++;\n            };\n        }\n    }\n    /**\n     * Restore the state of `Document` between tests.\n     * @experimental\n     */\n    function cleanupDocument() {\n        if (savedDocument) {\n            global.document = savedDocument;\n            global.window = undefined;\n            savedDocument = undefined;\n        }\n        if (savedNode) {\n            global.Node = savedNode;\n            savedNode = undefined;\n        }\n        if (savedRequestAnimationFrame) {\n            global.requestAnimationFrame = savedRequestAnimationFrame;\n            savedRequestAnimationFrame = undefined;\n        }\n    }\n    if (typeof beforeEach == 'function')\n        beforeEach(ensureDocument);\n    if (typeof afterEach == 'function')\n        beforeEach(cleanupDocument);\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // This file only reexports content of the `src` folder. Keep it that way.\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.async = async;\n    exports.ComponentFixture = ComponentFixture;\n    exports.resetFakeAsyncZone = resetFakeAsyncZone;\n    exports.fakeAsync = fakeAsync;\n    exports.tick = tick;\n    exports.flush = flush;\n    exports.discardPeriodicTasks = discardPeriodicTasks;\n    exports.flushMicrotasks = flushMicrotasks;\n    exports.TestComponentRenderer = TestComponentRenderer;\n    exports.ComponentFixtureAutoDetect = ComponentFixtureAutoDetect;\n    exports.ComponentFixtureNoNgZone = ComponentFixtureNoNgZone;\n    exports.TestBed = TestBed;\n    exports.getTestBed = getTestBed;\n    exports.inject = inject;\n    exports.InjectSetupWrapper = InjectSetupWrapper;\n    exports.withModule = withModule;\n    exports.__core_private_testing_placeholder__ = __core_private_testing_placeholder__;\n    exports.ɵTestingCompiler = TestingCompiler;\n    exports.ɵTestingCompilerFactory = TestingCompilerFactory;\n    exports.withBody = withBody;\n    exports.ensureDocument = ensureDocument;\n    exports.cleanupDocument = cleanupDocument;\n    exports.ɵ0 = ɵ0;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=core-testing.umd.js.map\n"]}